
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a0  00800100  000011b0  00001244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  008004a0  008004a0  000015e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001658  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e49  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab6  00000000  00000000  00003611  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df5  00000000  00000000  000040c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00004ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  00005174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac4  00000000  00000000  0000573e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00006202  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 eb       	ldi	r30, 0xB0	; 176
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3a       	cpi	r26, 0xA0	; 160
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	a0 ea       	ldi	r26, 0xA0	; 160
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3f       	cpi	r26, 0xF2	; 242
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a0 01 	call	0x340	; 0x340 <main>
      9e:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
#include "ADC.h"


void ADC_init(void)
{
	ADMUX |=  (1<<REFS0);		//Seleccionar el voltaje de referencia
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
	ADMUX &=~ (1<<REFS1);
      b0:	80 81       	ld	r24, Z
      b2:	8f 77       	andi	r24, 0x7F	; 127
      b4:	80 83       	st	Z, r24
	ADMUX &=~ (1<<ADLAR);		//Ajustar el resultado
      b6:	80 81       	ld	r24, Z
      b8:	8f 7d       	andi	r24, 0xDF	; 223
      ba:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADPS0);		// divisor = 128  16000/128 = 125 KHz
      bc:	ea e7       	ldi	r30, 0x7A	; 122
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	80 81       	ld	r24, Z
      c2:	81 60       	ori	r24, 0x01	; 1
      c4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
      c6:	80 81       	ld	r24, Z
      c8:	82 60       	ori	r24, 0x02	; 2
      ca:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
      cc:	80 81       	ld	r24, Z
      ce:	84 60       	ori	r24, 0x04	; 4
      d0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);		// Encendemos en ADC
      d2:	80 81       	ld	r24, Z
      d4:	80 68       	ori	r24, 0x80	; 128
      d6:	80 83       	st	Z, r24
      d8:	08 95       	ret

000000da <ADC_read>:
}


uint16_t ADC_read(uint8_t canal)
{
	canal &= 0b00000111;            // Limitar la entrada a canales 0-7 (la mayoría de AVR tienen 8 canales ADC)
      da:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF0) | canal; // Conservar los 4 bits superiores (config) y establecer los bits de selección de canal
      dc:	ec e7       	ldi	r30, 0x7C	; 124
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	90 81       	ld	r25, Z
      e2:	90 7f       	andi	r25, 0xF0	; 240
      e4:	89 2b       	or	r24, r25
      e6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);            // Inicia la conversión
      e8:	ea e7       	ldi	r30, 0x7A	; 122
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	80 64       	ori	r24, 0x40	; 64
      f0:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));      // Esperar hasta que se complete la conversión
      f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      f6:	86 fd       	sbrc	r24, 6
      f8:	fc cf       	rjmp	.-8      	; 0xf2 <ADC_read+0x18>
	return ADC;                     // Devolver el valor del ADC
      fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
      fe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     102:	08 95       	ret

00000104 <UART_init>:
void UART_write(unsigned char);				// función para la transmisión de caracteres
void UART_msg(char*);						// función para la transmisión de cadenas de caracteres

void UART_init(void)
{
	DDRD |= (1<<1);							//PD1	COMO SALIDA TXa
     104:	8a b1       	in	r24, 0x0a	; 10
     106:	82 60       	ori	r24, 0x02	; 2
     108:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<0);						//PD0	COMO ENTRADA RX
     10a:	8a b1       	in	r24, 0x0a	; 10
     10c:	8e 7f       	andi	r24, 0xFE	; 254
     10e:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = (0<<TXC0)|(0<<U2X0)|(0<<MPCM0);
     110:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<TXB80);
     114:	88 e9       	ldi	r24, 0x98	; 152
     116:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);
     11a:	86 e0       	ldi	r24, 0x06	; 6
     11c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103;							//NO DUPLICA VELOCIDAD 9600B A 160000
     120:	87 e6       	ldi	r24, 0x67	; 103
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     128:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     12c:	08 95       	ret

0000012e <UART_read>:
}

unsigned char UART_read(void)
{
	if(UCSR0A&(1<<7))						//si el bit7 del registro UCSR0A se ha puesto a 1
     12e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     132:	88 23       	and	r24, r24
     134:	1c f4       	brge	.+6      	; 0x13c <UART_read+0xe>
	return UDR0;						//devuelve el dato almacenado en el registro UDR0
     136:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     13a:	08 95       	ret
	else
	return 0;
     13c:	80 e0       	ldi	r24, 0x00	; 0
}
     13e:	08 95       	ret

00000140 <UART_read_txt>:

void UART_read_txt(char *buffer, uint8_t max_len) {
     140:	dc 01       	movw	r26, r24
	uint8_t i = 0;
     142:	70 e0       	ldi	r23, 0x00	; 0
	char c;

	while (i < (max_len - 1)) {
     144:	0f c0       	rjmp	.+30     	; 0x164 <UART_read_txt+0x24>
		// Espera a que llegue un carácter válido
		while (!(UCSR0A & (1 << RXC0)));
     146:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     14a:	99 23       	and	r25, r25
     14c:	e4 f7       	brge	.-8      	; 0x146 <UART_read_txt+0x6>
		c = UDR0;
     14e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		// Si llega un ENTER (fin de línea), se detiene
		if (c == '\n' || c == '\r') {
     152:	9a 30       	cpi	r25, 0x0A	; 10
     154:	81 f0       	breq	.+32     	; 0x176 <UART_read_txt+0x36>
     156:	9d 30       	cpi	r25, 0x0D	; 13
     158:	71 f0       	breq	.+28     	; 0x176 <UART_read_txt+0x36>
			break;
		}

		buffer[i++] = c;  // Guarda el carácter recibido
     15a:	fd 01       	movw	r30, r26
     15c:	e7 0f       	add	r30, r23
     15e:	f1 1d       	adc	r31, r1
     160:	90 83       	st	Z, r25
     162:	7f 5f       	subi	r23, 0xFF	; 255

void UART_read_txt(char *buffer, uint8_t max_len) {
	uint8_t i = 0;
	char c;

	while (i < (max_len - 1)) {
     164:	47 2f       	mov	r20, r23
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	26 2f       	mov	r18, r22
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	21 50       	subi	r18, 0x01	; 1
     16e:	31 09       	sbc	r19, r1
     170:	42 17       	cp	r20, r18
     172:	53 07       	cpc	r21, r19
     174:	44 f3       	brlt	.-48     	; 0x146 <UART_read_txt+0x6>
		}

		buffer[i++] = c;  // Guarda el carácter recibido
	}

	buffer[i] = '\0';  // Termina la cadena con NULL
     176:	a7 0f       	add	r26, r23
     178:	b1 1d       	adc	r27, r1
     17a:	1c 92       	st	X, r1
     17c:	08 95       	ret

0000017e <UART_write>:
}


void UART_write(unsigned char caracter)
{
	while(!(UCSR0A&(1<<5)));				// mientras el registro UDR0 esté lleno espera
     17e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     182:	95 ff       	sbrs	r25, 5
     184:	fc cf       	rjmp	.-8      	; 0x17e <UART_write>
	UDR0 = caracter;						//cuando el el registro UDR0 está vacio se envia el caracter
     186:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     18a:	08 95       	ret

0000018c <UART_write_txt>:
}

void UART_write_txt(char* cadena)			//cadena de caracteres de tipo char
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	ec 01       	movw	r28, r24
	while(*cadena !=0x00)
     192:	03 c0       	rjmp	.+6      	; 0x19a <UART_write_txt+0xe>
	{
		UART_write(*cadena);				//transmite los caracteres de cadena
     194:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_write>
		cadena++;							//incrementa la ubicación de los caracteres en cadena
     198:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = caracter;						//cuando el el registro UDR0 está vacio se envia el caracter
}

void UART_write_txt(char* cadena)			//cadena de caracteres de tipo char
{
	while(*cadena !=0x00)
     19a:	88 81       	ld	r24, Y
     19c:	81 11       	cpse	r24, r1
     19e:	fa cf       	rjmp	.-12     	; 0x194 <UART_write_txt+0x8>
	{
		UART_write(*cadena);				//transmite los caracteres de cadena
		cadena++;							//incrementa la ubicación de los caracteres en cadena
		//para enviar el siguiente caracter de cadena
	}
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <saveServoPositions>:
char buffer[32];                // Buffer auxiliar para recepción UART
uint8_t dato = 0;               // Variable para guardar datos leídos vía UART
uint8_t online = 0;             // Indicador para modo online

// Función que guarda los valores de los servos en la EEPROM
void saveServoPositions(uint16_t EE_POS1_ADDR, uint16_t EE_POS2_ADDR, uint16_t EE_POS3_ADDR, uint16_t EE_POS4_ADDR) {
     1a6:	cf 92       	push	r12
     1a8:	df 92       	push	r13
     1aa:	ef 92       	push	r14
     1ac:	ff 92       	push	r15
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	6c 01       	movw	r12, r24
     1b8:	7b 01       	movw	r14, r22
     1ba:	8a 01       	movw	r16, r20
     1bc:	e9 01       	movw	r28, r18
	eeprom_update_word(EE_POS1_ADDR, adcValue1);   // Guarda adcValue1 en la dirección EE_POS1_ADDR
     1be:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <adcValue1>
     1c2:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <adcValue1+0x1>
     1c6:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <adcValue1+0x2>
     1ca:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <adcValue1+0x3>
     1ce:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     1d2:	c6 01       	movw	r24, r12
     1d4:	0e 94 ae 08 	call	0x115c	; 0x115c <eeprom_update_word>
	eeprom_update_word(EE_POS2_ADDR, adcValue2);   // Guarda adcValue2 en la dirección EE_POS2_ADDR
     1d8:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <adcValue2>
     1dc:	70 91 ab 04 	lds	r23, 0x04AB	; 0x8004ab <adcValue2+0x1>
     1e0:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <adcValue2+0x2>
     1e4:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <adcValue2+0x3>
     1e8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     1ec:	c7 01       	movw	r24, r14
     1ee:	0e 94 ae 08 	call	0x115c	; 0x115c <eeprom_update_word>
	eeprom_update_word(EE_POS3_ADDR, adcValue3);   // Guarda adcValue3 en la dirección EE_POS3_ADDR
     1f2:	60 91 a6 04 	lds	r22, 0x04A6	; 0x8004a6 <adcValue3>
     1f6:	70 91 a7 04 	lds	r23, 0x04A7	; 0x8004a7 <adcValue3+0x1>
     1fa:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <adcValue3+0x2>
     1fe:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <adcValue3+0x3>
     202:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     206:	c8 01       	movw	r24, r16
     208:	0e 94 ae 08 	call	0x115c	; 0x115c <eeprom_update_word>
	eeprom_update_word(EE_POS4_ADDR, adcValue4);   // Guarda adcValue4 en la dirección EE_POS4_ADDR
     20c:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <adcValue4>
     210:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <adcValue4+0x1>
     214:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <adcValue4+0x2>
     218:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <adcValue4+0x3>
     21c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     220:	ce 01       	movw	r24, r28
     222:	0e 94 ae 08 	call	0x115c	; 0x115c <eeprom_update_word>
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	ff 90       	pop	r15
     230:	ef 90       	pop	r14
     232:	df 90       	pop	r13
     234:	cf 90       	pop	r12
     236:	08 95       	ret

00000238 <loadServoPositions>:

// Función que carga valores guardados de los servos desde EEPROM
void loadServoPositions(uint16_t EE_POS1_ADDR, uint16_t EE_POS2_ADDR, uint16_t EE_POS3_ADDR, uint16_t EE_POS4_ADDR) {
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	7b 01       	movw	r14, r22
     246:	8a 01       	movw	r16, r20
     248:	e9 01       	movw	r28, r18
	adcValue1 = eeprom_read_word(EE_POS1_ADDR);   // Lee valor desde EE_POS1_ADDR en adcValue1
     24a:	0e 94 a8 08 	call	0x1150	; 0x1150 <eeprom_read_word>
     24e:	bc 01       	movw	r22, r24
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatunsisf>
     258:	60 93 ae 04 	sts	0x04AE, r22	; 0x8004ae <adcValue1>
     25c:	70 93 af 04 	sts	0x04AF, r23	; 0x8004af <adcValue1+0x1>
     260:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <adcValue1+0x2>
     264:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <adcValue1+0x3>
	adcValue2 = eeprom_read_word(EE_POS2_ADDR);   // Lee valor desde EE_POS2_ADDR en adcValue2
     268:	c7 01       	movw	r24, r14
     26a:	0e 94 a8 08 	call	0x1150	; 0x1150 <eeprom_read_word>
     26e:	bc 01       	movw	r22, r24
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatunsisf>
     278:	60 93 aa 04 	sts	0x04AA, r22	; 0x8004aa <adcValue2>
     27c:	70 93 ab 04 	sts	0x04AB, r23	; 0x8004ab <adcValue2+0x1>
     280:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <adcValue2+0x2>
     284:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <adcValue2+0x3>
	adcValue3 = eeprom_read_word(EE_POS3_ADDR);   // Lee valor desde EE_POS3_ADDR en adcValue3
     288:	c8 01       	movw	r24, r16
     28a:	0e 94 a8 08 	call	0x1150	; 0x1150 <eeprom_read_word>
     28e:	bc 01       	movw	r22, r24
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatunsisf>
     298:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <adcValue3>
     29c:	70 93 a7 04 	sts	0x04A7, r23	; 0x8004a7 <adcValue3+0x1>
     2a0:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <adcValue3+0x2>
     2a4:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <adcValue3+0x3>
	adcValue4 = eeprom_read_word(EE_POS4_ADDR);   // Lee valor desde EE_POS4_ADDR en adcValue4
     2a8:	ce 01       	movw	r24, r28
     2aa:	0e 94 a8 08 	call	0x1150	; 0x1150 <eeprom_read_word>
     2ae:	bc 01       	movw	r22, r24
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatunsisf>
     2b8:	60 93 a2 04 	sts	0x04A2, r22	; 0x8004a2 <adcValue4>
     2bc:	70 93 a3 04 	sts	0x04A3, r23	; 0x8004a3 <adcValue4+0x1>
     2c0:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <adcValue4+0x2>
     2c4:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <adcValue4+0x3>
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	08 95       	ret

000002d6 <UART_parse_comando>:
	char id[3];       // Identificador del comando, ej. "S1"
	int value;        // Valor asociado al comando, ej. 500
} ComandoUART;

// Función que parsea un comando UART recibido tipo "S1: 500"
uint8_t UART_parse_comando(const char* input, ComandoUART* cmd) {
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	6c 01       	movw	r12, r24
     2e8:	7b 01       	movw	r14, r22
	char* sep = strchr(input, ':');     // Busca carácter ':' en el string de entrada
     2ea:	6a e3       	ldi	r22, 0x3A	; 58
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	0e 94 46 08 	call	0x108c	; 0x108c <strchr>
     2f2:	8c 01       	movw	r16, r24
	if (sep == NULL) return 0;           // Si no encuentra ':', comando inválido y retorna 0
     2f4:	00 97       	sbiw	r24, 0x00	; 0
     2f6:	c1 f0       	breq	.+48     	; 0x328 <UART_parse_comando+0x52>

	uint8_t len = sep - input;           // Calcula la longitud del id antes del ':'
     2f8:	ac 01       	movw	r20, r24
     2fa:	4c 19       	sub	r20, r12
     2fc:	5d 09       	sbc	r21, r13
	if (len > 2) return 0;               // Si id es más largo que 2 caracteres, comando inválido
     2fe:	43 30       	cpi	r20, 0x03	; 3
     300:	a8 f4       	brcc	.+42     	; 0x32c <UART_parse_comando+0x56>
     302:	ea 01       	movw	r28, r20
     304:	dd 27       	eor	r29, r29

	strncpy(cmd->id, input, len);        // Copia los primeros caracteres al id
     306:	ae 01       	movw	r20, r28
     308:	b6 01       	movw	r22, r12
     30a:	c7 01       	movw	r24, r14
     30c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <strncpy>
	cmd->id[len] = '\0';                 // Agrega fin de cadena al id
     310:	ce 0d       	add	r28, r14
     312:	df 1d       	adc	r29, r15
     314:	18 82       	st	Y, r1

	cmd->value = atoi(sep + 1);          // Convierte la parte después del ':' a valor entero
     316:	c8 01       	movw	r24, r16
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	0e 94 28 08 	call	0x1050	; 0x1050 <atoi>
     31e:	f7 01       	movw	r30, r14
     320:	94 83       	std	Z+4, r25	; 0x04
     322:	83 83       	std	Z+3, r24	; 0x03

	return 1;                           // Comando parseado correctamente, retorna 1
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	03 c0       	rjmp	.+6      	; 0x32e <UART_parse_comando+0x58>
} ComandoUART;

// Función que parsea un comando UART recibido tipo "S1: 500"
uint8_t UART_parse_comando(const char* input, ComandoUART* cmd) {
	char* sep = strchr(input, ':');     // Busca carácter ':' en el string de entrada
	if (sep == NULL) return 0;           // Si no encuentra ':', comando inválido y retorna 0
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	01 c0       	rjmp	.+2      	; 0x32e <UART_parse_comando+0x58>

	uint8_t len = sep - input;           // Calcula la longitud del id antes del ':'
	if (len > 2) return 0;               // Si id es más largo que 2 caracteres, comando inválido
     32c:	80 e0       	ldi	r24, 0x00	; 0
	cmd->id[len] = '\0';                 // Agrega fin de cadena al id

	cmd->value = atoi(sep + 1);          // Convierte la parte después del ':' a valor entero

	return 1;                           // Comando parseado correctamente, retorna 1
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	ef 90       	pop	r14
     33a:	df 90       	pop	r13
     33c:	cf 90       	pop	r12
     33e:	08 95       	ret

00000340 <main>:

int main(void) {
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	2f 97       	sbiw	r28, 0x0f	; 15
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;                        // Configura todo el puerto D como salida
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00000111;                  // Configura los bits 0,1 y 2 del puerto C como salida
     358:	87 e0       	ldi	r24, 0x07	; 7
     35a:	87 b9       	out	0x07, r24	; 7

	ADC_init();                        // Inicializa el ADC
     35c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	PWM1_init();                      // Inicializa el PWM1 para servos
     360:	0e 94 40 05 	call	0xa80	; 0xa80 <PWM1_init>
	PWM0_init();                      // Inicializa el PWM0 para actuadores
     364:	0e 94 d7 04 	call	0x9ae	; 0x9ae <PWM0_init>
	UART_init();                      // Inicializa UART para comunicación serial
     368:	0e 94 82 00 	call	0x104	; 0x104 <UART_init>

	while (1) {                       // Bucle infinito principal
		dato = 0;                    // Reinicia variable dato a 0
     36c:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <dato>
		UART_write_txt("\r\n");      // Envía salto de línea por UART
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
		UART_write_txt("Usted se encuentra en modo manual \n\r");  // Mensaje modo manual
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
		UART_write_txt("- Modo EEPROM (Presionar 1) \n\r");         // Mensaje opción EEPROM
     380:	88 e2       	ldi	r24, 0x28	; 40
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
		UART_write_txt("- Modo Online (Presionar 2) \n\r");         // Mensaje opción Online
     388:	87 e4       	ldi	r24, 0x47	; 71
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>

		PORTC |= (1 << PC0);          // Enciende LED o señal en PC0
     390:	88 b1       	in	r24, 0x08	; 8
     392:	81 60       	ori	r24, 0x01	; 1
     394:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PC1);         // Apaga PC1
     396:	88 b1       	in	r24, 0x08	; 8
     398:	8d 7f       	andi	r24, 0xFD	; 253
     39a:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PC2);         // Apaga PC2
     39c:	88 b1       	in	r24, 0x08	; 8
     39e:	8b 7f       	andi	r24, 0xFB	; 251
     3a0:	88 b9       	out	0x08, r24	; 8
		ADCSRA |= (1 << ADEN);        // Habilita el ADC para lectura
     3a2:	ea e7       	ldi	r30, 0x7A	; 122
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	80 83       	st	Z, r24

		while (dato == 0) {           // Bucle espera a dato para seleccionar modo
     3ac:	66 c0       	rjmp	.+204    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			dato = UART_read();       // Lee dato de UART
     3ae:	0e 94 97 00 	call	0x12e	; 0x12e <UART_read>
     3b2:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <dato>

			adcValue1 = ADC_read(6);  // Lee canal ADC 6 y guarda en adcValue1
     3b6:	86 e0       	ldi	r24, 0x06	; 6
     3b8:	0e 94 6d 00 	call	0xda	; 0xda <ADC_read>
     3bc:	bc 01       	movw	r22, r24
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatunsisf>
     3c6:	60 93 ae 04 	sts	0x04AE, r22	; 0x8004ae <adcValue1>
     3ca:	70 93 af 04 	sts	0x04AF, r23	; 0x8004af <adcValue1+0x1>
     3ce:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <adcValue1+0x2>
     3d2:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <adcValue1+0x3>
			servo_writeA(adcValue1);  // Envía valor ADC al servo A (PWM1)
     3d6:	0e 94 bb 05 	call	0xb76	; 0xb76 <servo_writeA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3da:	8f e1       	ldi	r24, 0x1F	; 31
     3dc:	9e e4       	ldi	r25, 0x4E	; 78
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <main+0x9e>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0xa4>
     3e4:	00 00       	nop
			_delay_ms(5);             // Retardo breve

			adcValue2 = ADC_read(7);  // Lee canal ADC 7 y guarda en adcValue2
     3e6:	87 e0       	ldi	r24, 0x07	; 7
     3e8:	0e 94 6d 00 	call	0xda	; 0xda <ADC_read>
     3ec:	bc 01       	movw	r22, r24
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatunsisf>
     3f6:	60 93 aa 04 	sts	0x04AA, r22	; 0x8004aa <adcValue2>
     3fa:	70 93 ab 04 	sts	0x04AB, r23	; 0x8004ab <adcValue2+0x1>
     3fe:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <adcValue2+0x2>
     402:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <adcValue2+0x3>
			servo_writeB(adcValue2);  // Envía valor ADC al servo B (PWM1)
     406:	0e 94 ed 05 	call	0xbda	; 0xbda <servo_writeB>
     40a:	8f e1       	ldi	r24, 0x1F	; 31
     40c:	9e e4       	ldi	r25, 0x4E	; 78
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     414:	00 00       	nop
			_delay_ms(5);             // Retardo breve

			adcValue3 = ADC_read(5);  // Lee canal ADC 5 y guarda en adcValue3
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	0e 94 6d 00 	call	0xda	; 0xda <ADC_read>
     41c:	bc 01       	movw	r22, r24
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatunsisf>
     426:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <adcValue3>
     42a:	70 93 a7 04 	sts	0x04A7, r23	; 0x8004a7 <adcValue3+0x1>
     42e:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <adcValue3+0x2>
     432:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <adcValue3+0x3>
			PWM0_dca(adcValue3, NO_INVERTING);  // Control PWM0 canal A
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PWM0_dca>
     43c:	8f e1       	ldi	r24, 0x1F	; 31
     43e:	9e e4       	ldi	r25, 0x4E	; 78
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     446:	00 00       	nop
			_delay_ms(5);             // Retardo breve

			adcValue4 = ADC_read(4);  // Lee canal ADC 4 y guarda en adcValue4
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	0e 94 6d 00 	call	0xda	; 0xda <ADC_read>
     44e:	bc 01       	movw	r22, r24
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatunsisf>
     458:	60 93 a2 04 	sts	0x04A2, r22	; 0x8004a2 <adcValue4>
     45c:	70 93 a3 04 	sts	0x04A3, r23	; 0x8004a3 <adcValue4+0x1>
     460:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <adcValue4+0x2>
     464:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <adcValue4+0x3>
			PWM0_dcb(adcValue4, NO_INVERTING);  // Control PWM0 canal B
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	0e 94 15 05 	call	0xa2a	; 0xa2a <PWM0_dcb>
     46e:	8f e1       	ldi	r24, 0x1F	; 31
     470:	9e e4       	ldi	r25, 0x4E	; 78
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	f1 f7       	brne	.-4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     478:	00 00       	nop
		PORTC |= (1 << PC0);          // Enciende LED o señal en PC0
		PORTC &= ~(1 << PC1);         // Apaga PC1
		PORTC &= ~(1 << PC2);         // Apaga PC2
		ADCSRA |= (1 << ADEN);        // Habilita el ADC para lectura

		while (dato == 0) {           // Bucle espera a dato para seleccionar modo
     47a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <dato>
     47e:	88 23       	and	r24, r24
     480:	09 f4       	brne	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     482:	95 cf       	rjmp	.-214    	; 0x3ae <main+0x6e>
			adcValue4 = ADC_read(4);  // Lee canal ADC 4 y guarda en adcValue4
			PWM0_dcb(adcValue4, NO_INVERTING);  // Control PWM0 canal B
			_delay_ms(5);             // Retardo breve
		}

		ADCSRA &= ~(1 << ADEN);       // Deshabilita el ADC
     484:	ea e7       	ldi	r30, 0x7A	; 122
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	8f 77       	andi	r24, 0x7F	; 127
     48c:	80 83       	st	Z, r24

		switch (dato) {               // Decisión según tecla recibida
     48e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <dato>
     492:	81 33       	cpi	r24, 0x31	; 49
     494:	21 f0       	breq	.+8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     496:	82 33       	cpi	r24, 0x32	; 50
     498:	09 f4       	brne	.+2      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     49a:	d1 c1       	rjmp	.+930    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     49c:	77 c2       	rjmp	.+1262   	; 0x98c <__stack+0x8d>
			case 49:  // Caso '1' en ASCII - modo EEPROM
			PORTC &= ~(1 << PC0); // Apaga PC0
     49e:	88 b1       	in	r24, 0x08	; 8
     4a0:	8e 7f       	andi	r24, 0xFE	; 254
     4a2:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << PC1);  // Enciende PC1
     4a4:	88 b1       	in	r24, 0x08	; 8
     4a6:	82 60       	ori	r24, 0x02	; 2
     4a8:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PC2); // Apaga PC2
     4aa:	88 b1       	in	r24, 0x08	; 8
     4ac:	8b 7f       	andi	r24, 0xFB	; 251
     4ae:	88 b9       	out	0x08, r24	; 8
			dato = 0;             // Reinicia dato
     4b0:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <dato>

			UART_write_txt("\r\n");
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
			UART_write_txt("- Guardar posicion (1)  \n\r");
     4bc:	86 e6       	ldi	r24, 0x66	; 102
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
			UART_write_txt("- Cargar posicion o secuencia (2) \n\r");
     4c4:	81 e8       	ldi	r24, 0x81	; 129
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>

			while (dato == 0) {  // Espera opción 1 o 2
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
				dato = UART_read();
     4ce:	0e 94 97 00 	call	0x12e	; 0x12e <UART_read>
     4d2:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <dato>

			UART_write_txt("\r\n");
			UART_write_txt("- Guardar posicion (1)  \n\r");
			UART_write_txt("- Cargar posicion o secuencia (2) \n\r");

			while (dato == 0) {  // Espera opción 1 o 2
     4d6:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <dato>
     4da:	88 23       	and	r24, r24
     4dc:	c1 f3       	breq	.-16     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
				dato = UART_read();
			}

			switch (dato) {
     4de:	81 33       	cpi	r24, 0x31	; 49
     4e0:	21 f0       	breq	.+8      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     4e2:	82 33       	cpi	r24, 0x32	; 50
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     4e6:	7b c0       	rjmp	.+246    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
     4e8:	41 cf       	rjmp	.-382    	; 0x36c <main+0x2c>
				case 49:  // Guardar
				UART_write_txt("\r\n");
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				UART_write_txt("- Seleccione que posicion guardar  \n\r");
     4f2:	86 ea       	ldi	r24, 0xA6	; 166
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				UART_write_txt("- Posicion 1 (1) \n\r");
     4fa:	8c ec       	ldi	r24, 0xCC	; 204
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				UART_write_txt("- Posicion 2 (2) \n\r");
     502:	80 ee       	ldi	r24, 0xE0	; 224
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				UART_write_txt("- Posicion de carga (3) \n\r");
     50a:	84 ef       	ldi	r24, 0xF4	; 244
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				UART_write_txt("- Posicion de descarga (4) \n\r");
     512:	8f e0       	ldi	r24, 0x0F	; 15
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				dato = 0;
     51a:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <dato>

				while (dato == 0) {   // Espera selección de posición a guardar
     51e:	04 c0       	rjmp	.+8      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
					dato = UART_read();
     520:	0e 94 97 00 	call	0x12e	; 0x12e <UART_read>
     524:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <dato>
				UART_write_txt("- Posicion 2 (2) \n\r");
				UART_write_txt("- Posicion de carga (3) \n\r");
				UART_write_txt("- Posicion de descarga (4) \n\r");
				dato = 0;

				while (dato == 0) {   // Espera selección de posición a guardar
     528:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <dato>
     52c:	88 23       	and	r24, r24
     52e:	c1 f3       	breq	.-16     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
					dato = UART_read();
				}

				switch (dato) {
     530:	82 33       	cpi	r24, 0x32	; 50
     532:	e1 f0       	breq	.+56     	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
     534:	18 f4       	brcc	.+6      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     536:	81 33       	cpi	r24, 0x31	; 49
     538:	31 f0       	breq	.+12     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
     53a:	18 cf       	rjmp	.-464    	; 0x36c <main+0x2c>
     53c:	83 33       	cpi	r24, 0x33	; 51
     53e:	49 f1       	breq	.+82     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
     540:	84 33       	cpi	r24, 0x34	; 52
     542:	d1 f1       	breq	.+116    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
     544:	13 cf       	rjmp	.-474    	; 0x36c <main+0x2c>
					case 49:
					saveServoPositions(pos1[0], pos1[1], pos1[2], pos1[3]);  // Guarda posición 1
     546:	26 e0       	ldi	r18, 0x06	; 6
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	44 e0       	ldi	r20, 0x04	; 4
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	62 e0       	ldi	r22, 0x02	; 2
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <saveServoPositions>
					UART_write_txt("\r\n");
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Posicion 1 guardada \n\r");
     562:	8d e2       	ldi	r24, 0x2D	; 45
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					break;
     56a:	00 cf       	rjmp	.-512    	; 0x36c <main+0x2c>
					case 50:
					saveServoPositions(pos2[0], pos2[1], pos2[2], pos2[3]);  // Guarda posición 2
     56c:	2e e0       	ldi	r18, 0x0E	; 14
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	4c e0       	ldi	r20, 0x0C	; 12
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	6a e0       	ldi	r22, 0x0A	; 10
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	88 e0       	ldi	r24, 0x08	; 8
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <saveServoPositions>
					UART_write_txt("\r\n");
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Posicion 2 guardada \n\r");
     588:	84 e4       	ldi	r24, 0x44	; 68
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					break;
     590:	ed ce       	rjmp	.-550    	; 0x36c <main+0x2c>
					case 51:
					saveServoPositions(poscar[0], poscar[1], poscar[2], poscar[3]);  // Posición de carga
     592:	26 e1       	ldi	r18, 0x16	; 22
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	44 e1       	ldi	r20, 0x14	; 20
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	62 e1       	ldi	r22, 0x12	; 18
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	80 e1       	ldi	r24, 0x10	; 16
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <saveServoPositions>
					UART_write_txt("\r\n");
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Posicion de carga guardada \n\r");
     5ae:	8b e5       	ldi	r24, 0x5B	; 91
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					break;
     5b6:	da ce       	rjmp	.-588    	; 0x36c <main+0x2c>
					case 52:
					saveServoPositions(posdis[0], posdis[1], posdis[2], posdis[3]);  // Posición de descarga
     5b8:	2e e1       	ldi	r18, 0x1E	; 30
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	4c e1       	ldi	r20, 0x1C	; 28
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	6a e1       	ldi	r22, 0x1A	; 26
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	88 e1       	ldi	r24, 0x18	; 24
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <saveServoPositions>
					UART_write_txt("\r\n");
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Posicion de descarga guardada \n\r");
     5d4:	89 e7       	ldi	r24, 0x79	; 121
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					break;
     5dc:	c7 ce       	rjmp	.-626    	; 0x36c <main+0x2c>
					break;  // No hacer nada si opción inválida
				}
				break;

				case 50:  // Cargar posiciones o secuencia
				UART_write_txt("\r\n");
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				UART_write_txt("- Seleccione que posicion cargar  \n\r");
     5e6:	8a e9       	ldi	r24, 0x9A	; 154
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				UART_write_txt("- Posicion 1 (1) \n\r");
     5ee:	8c ec       	ldi	r24, 0xCC	; 204
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				UART_write_txt("- Posicion 2 (2) \n\r");
     5f6:	80 ee       	ldi	r24, 0xE0	; 224
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				UART_write_txt("- Ejecutar secuencia (3) \n\r");
     5fe:	8f eb       	ldi	r24, 0xBF	; 191
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				dato = 0;
     606:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <dato>

				while (dato == 0) {  // Espera selección para cargar posición o ejecutar secuencia
     60a:	04 c0       	rjmp	.+8      	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
					dato = UART_read();
     60c:	0e 94 97 00 	call	0x12e	; 0x12e <UART_read>
     610:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <dato>
				UART_write_txt("- Posicion 1 (1) \n\r");
				UART_write_txt("- Posicion 2 (2) \n\r");
				UART_write_txt("- Ejecutar secuencia (3) \n\r");
				dato = 0;

				while (dato == 0) {  // Espera selección para cargar posición o ejecutar secuencia
     614:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <dato>
     618:	88 23       	and	r24, r24
     61a:	c1 f3       	breq	.-16     	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
					dato = UART_read();
				}

				switch (dato) {
     61c:	82 33       	cpi	r24, 0x32	; 50
     61e:	c1 f0       	breq	.+48     	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
     620:	83 33       	cpi	r24, 0x33	; 51
     622:	49 f1       	breq	.+82     	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
     624:	81 33       	cpi	r24, 0x31	; 49
     626:	09 f0       	breq	.+2      	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
     628:	d0 c0       	rjmp	.+416    	; 0x7ca <__EEPROM_REGION_LENGTH__+0x3ca>
					case 49:
					loadServoPositions(pos1[0], pos1[1], pos1[2], pos1[3]);  // Carga posición 1
     62a:	26 e0       	ldi	r18, 0x06	; 6
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	44 e0       	ldi	r20, 0x04	; 4
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	62 e0       	ldi	r22, 0x02	; 2
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 1c 01 	call	0x238	; 0x238 <loadServoPositions>
					UART_write_txt("\r\n");
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Posicion 1 cargada \n\r");
     646:	8b ed       	ldi	r24, 0xDB	; 219
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					break;
     64e:	bd c0       	rjmp	.+378    	; 0x7ca <__EEPROM_REGION_LENGTH__+0x3ca>
					case 50:
					loadServoPositions(pos2[0], pos2[1], pos2[2], pos2[3]);  // Carga posición 2
     650:	2e e0       	ldi	r18, 0x0E	; 14
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	4c e0       	ldi	r20, 0x0C	; 12
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	6a e0       	ldi	r22, 0x0A	; 10
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	88 e0       	ldi	r24, 0x08	; 8
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 1c 01 	call	0x238	; 0x238 <loadServoPositions>
					UART_write_txt("\r\n");
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Posicion 2 cargada \n\r");
     66c:	81 ef       	ldi	r24, 0xF1	; 241
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					break;
     674:	aa c0       	rjmp	.+340    	; 0x7ca <__EEPROM_REGION_LENGTH__+0x3ca>

					case 51:  // Ejecutar secuencia completa
					ejecutar:
					loadServoPositions(poscar[0], poscar[1], poscar[2], poscar[3]);  // Carga posición de carga
     676:	26 e1       	ldi	r18, 0x16	; 22
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	44 e1       	ldi	r20, 0x14	; 20
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	62 e1       	ldi	r22, 0x12	; 18
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	80 e1       	ldi	r24, 0x10	; 16
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 1c 01 	call	0x238	; 0x238 <loadServoPositions>
					PWM0_dcb(adcValue4, NO_INVERTING);              // Actualiza PWM0 canal B
     68a:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <adcValue4>
     68e:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <adcValue4+0x1>
     692:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <adcValue4+0x2>
     696:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <adcValue4+0x3>
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	0e 94 15 05 	call	0xa2a	; 0xa2a <PWM0_dcb>
					servo_writeA(adcValue1);                         // Mueve servo A a adcValue1
     6a0:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <adcValue1>
     6a4:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <adcValue1+0x1>
     6a8:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <adcValue1+0x2>
     6ac:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <adcValue1+0x3>
     6b0:	0e 94 bb 05 	call	0xb76	; 0xb76 <servo_writeA>
					servo_writeB(adcValue2);                         // Mueve servo B a adcValue2
     6b4:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <adcValue2>
     6b8:	70 91 ab 04 	lds	r23, 0x04AB	; 0x8004ab <adcValue2+0x1>
     6bc:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <adcValue2+0x2>
     6c0:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <adcValue2+0x3>
     6c4:	0e 94 ed 05 	call	0xbda	; 0xbda <servo_writeB>
					PWM0_dca(Garra_Abierta, NO_INVERTING);          // Abre la garra (PWM0 canal A)
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	8f ea       	ldi	r24, 0xAF	; 175
     6d0:	93 e4       	ldi	r25, 0x43	; 67
     6d2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PWM0_dca>
					UART_write_txt("\r\n");
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Posicione el objeto y envie cualquier caracter \n\r");
     6de:	87 e0       	ldi	r24, 0x07	; 7
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					dato = 0;
     6e6:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <dato>

					while (dato == 0) {  // Espera confirmación usuario para continuar
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
						dato = UART_read();
     6ec:	0e 94 97 00 	call	0x12e	; 0x12e <UART_read>
     6f0:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <dato>
					PWM0_dca(Garra_Abierta, NO_INVERTING);          // Abre la garra (PWM0 canal A)
					UART_write_txt("\r\n");
					UART_write_txt("Posicione el objeto y envie cualquier caracter \n\r");
					dato = 0;

					while (dato == 0) {  // Espera confirmación usuario para continuar
     6f4:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <dato>
     6f8:	88 23       	and	r24, r24
     6fa:	c1 f3       	breq	.-16     	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
						dato = UART_read();
					}

					PWM0_dca(Garra_Cerrada, NO_INVERTING);          // Cierra la garra
     6fc:	41 e0       	ldi	r20, 0x01	; 1
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	8a e7       	ldi	r24, 0x7A	; 122
     704:	94 e4       	ldi	r25, 0x44	; 68
     706:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PWM0_dca>
     70a:	9f ef       	ldi	r25, 0xFF	; 255
     70c:	23 ed       	ldi	r18, 0xD3	; 211
     70e:	80 e3       	ldi	r24, 0x30	; 48
     710:	91 50       	subi	r25, 0x01	; 1
     712:	20 40       	sbci	r18, 0x00	; 0
     714:	80 40       	sbci	r24, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
     718:	00 c0       	rjmp	.+0      	; 0x71a <__EEPROM_REGION_LENGTH__+0x31a>
     71a:	00 00       	nop
					_delay_ms(1000);                               // Espera 1 segundo

					loadServoPositions(posdis[0], posdis[1], posdis[2], posdis[3]);  // Carga posición descarga
     71c:	2e e1       	ldi	r18, 0x1E	; 30
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	4c e1       	ldi	r20, 0x1C	; 28
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	6a e1       	ldi	r22, 0x1A	; 26
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	88 e1       	ldi	r24, 0x18	; 24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 1c 01 	call	0x238	; 0x238 <loadServoPositions>
					PWM0_dcb(adcValue4, NO_INVERTING);              // Actualiza PWM0 canal B
     730:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <adcValue4>
     734:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <adcValue4+0x1>
     738:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <adcValue4+0x2>
     73c:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <adcValue4+0x3>
     740:	41 e0       	ldi	r20, 0x01	; 1
     742:	0e 94 15 05 	call	0xa2a	; 0xa2a <PWM0_dcb>
					servo_writeA(adcValue1);                         // Mueve servo A a adcValue1
     746:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <adcValue1>
     74a:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <adcValue1+0x1>
     74e:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <adcValue1+0x2>
     752:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <adcValue1+0x3>
     756:	0e 94 bb 05 	call	0xb76	; 0xb76 <servo_writeA>
					servo_writeB(adcValue2);                         // Mueve servo B a adcValue2
     75a:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <adcValue2>
     75e:	70 91 ab 04 	lds	r23, 0x04AB	; 0x8004ab <adcValue2+0x1>
     762:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <adcValue2+0x2>
     766:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <adcValue2+0x3>
     76a:	0e 94 ed 05 	call	0xbda	; 0xbda <servo_writeB>
     76e:	9f ef       	ldi	r25, 0xFF	; 255
     770:	23 ed       	ldi	r18, 0xD3	; 211
     772:	80 e3       	ldi	r24, 0x30	; 48
     774:	91 50       	subi	r25, 0x01	; 1
     776:	20 40       	sbci	r18, 0x00	; 0
     778:	80 40       	sbci	r24, 0x00	; 0
     77a:	e1 f7       	brne	.-8      	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
     77e:	00 00       	nop
					_delay_ms(1000);                               // Espera 1 segundo
					
					PWM0_dca(Garra_Abierta, NO_INVERTING);          // Abre garra para soltar objeto
     780:	41 e0       	ldi	r20, 0x01	; 1
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	8f ea       	ldi	r24, 0xAF	; 175
     788:	93 e4       	ldi	r25, 0x43	; 67
     78a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PWM0_dca>
					UART_write_txt("\r\n");
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Secuencia ejecutada \n\r");
     796:	89 e3       	ldi	r24, 0x39	; 57
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("-Para volver a ejecutar la secuencia presione 1 \n\r");
     79e:	80 e5       	ldi	r24, 0x50	; 80
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("-Para volver al modo manual presione cualquier otro caracter \n\r");
     7a6:	83 e8       	ldi	r24, 0x83	; 131
     7a8:	93 e0       	ldi	r25, 0x03	; 3
     7aa:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					dato = 0;
     7ae:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <dato>

					while (dato == 0) {  // Espera opción para repetir secuencia
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <__EEPROM_REGION_LENGTH__+0x3bc>
						dato = UART_read();
     7b4:	0e 94 97 00 	call	0x12e	; 0x12e <UART_read>
     7b8:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <dato>
					UART_write_txt("Secuencia ejecutada \n\r");
					UART_write_txt("-Para volver a ejecutar la secuencia presione 1 \n\r");
					UART_write_txt("-Para volver al modo manual presione cualquier otro caracter \n\r");
					dato = 0;

					while (dato == 0) {  // Espera opción para repetir secuencia
     7bc:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <dato>
     7c0:	88 23       	and	r24, r24
     7c2:	c1 f3       	breq	.-16     	; 0x7b4 <__EEPROM_REGION_LENGTH__+0x3b4>
						dato = UART_read();
					}

					if (dato == 49) {
     7c4:	81 33       	cpi	r24, 0x31	; 49
     7c6:	09 f4       	brne	.+2      	; 0x7ca <__EEPROM_REGION_LENGTH__+0x3ca>
     7c8:	56 cf       	rjmp	.-340    	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
					default:
					break; // No hacer nada si opción inválida
				}

				// Después de cargar o secuenciar, actualiza servos con valores actuales
				servo_writeA(adcValue1);
     7ca:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <adcValue1>
     7ce:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <adcValue1+0x1>
     7d2:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <adcValue1+0x2>
     7d6:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <adcValue1+0x3>
     7da:	0e 94 bb 05 	call	0xb76	; 0xb76 <servo_writeA>
				servo_writeB(adcValue2);
     7de:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <adcValue2>
     7e2:	70 91 ab 04 	lds	r23, 0x04AB	; 0x8004ab <adcValue2+0x1>
     7e6:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <adcValue2+0x2>
     7ea:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <adcValue2+0x3>
     7ee:	0e 94 ed 05 	call	0xbda	; 0xbda <servo_writeB>
				PWM0_dca(adcValue3, NO_INVERTING);
     7f2:	60 91 a6 04 	lds	r22, 0x04A6	; 0x8004a6 <adcValue3>
     7f6:	70 91 a7 04 	lds	r23, 0x04A7	; 0x8004a7 <adcValue3+0x1>
     7fa:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <adcValue3+0x2>
     7fe:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <adcValue3+0x3>
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PWM0_dca>
				PWM0_dcb(adcValue4, NO_INVERTING);
     808:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <adcValue4>
     80c:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <adcValue4+0x1>
     810:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <adcValue4+0x2>
     814:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <adcValue4+0x3>
     818:	41 e0       	ldi	r20, 0x01	; 1
     81a:	0e 94 15 05 	call	0xa2a	; 0xa2a <PWM0_dcb>
				UART_write_txt("Envie cualquier tecla para regresar al modo manual\n\r");
     81e:	83 ec       	ldi	r24, 0xC3	; 195
     820:	93 e0       	ldi	r25, 0x03	; 3
     822:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
				dato = 0;
     826:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <dato>

				while (dato == 0) {  // Espera confirmación para volver al modo manual
     82a:	04 c0       	rjmp	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
					dato = UART_read();
     82c:	0e 94 97 00 	call	0x12e	; 0x12e <UART_read>
     830:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <dato>
				PWM0_dca(adcValue3, NO_INVERTING);
				PWM0_dcb(adcValue4, NO_INVERTING);
				UART_write_txt("Envie cualquier tecla para regresar al modo manual\n\r");
				dato = 0;

				while (dato == 0) {  // Espera confirmación para volver al modo manual
     834:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <dato>
     838:	88 23       	and	r24, r24
     83a:	c1 f3       	breq	.-16     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     83c:	97 cd       	rjmp	.-1234   	; 0x36c <main+0x2c>
			}
			dato = 0;  // Reinicia dato para próximo ciclo
			break;

			case 50:  // Caso '2' - modo Online (control por comandos UART)
			PORTC &= ~(1 << PC0);  // Apaga PC0
     83e:	88 b1       	in	r24, 0x08	; 8
     840:	8e 7f       	andi	r24, 0xFE	; 254
     842:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PC1);  // Apaga PC1
     844:	88 b1       	in	r24, 0x08	; 8
     846:	8d 7f       	andi	r24, 0xFD	; 253
     848:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << PC2);   // Enciende PC2 para indicar modo online
     84a:	88 b1       	in	r24, 0x08	; 8
     84c:	84 60       	ori	r24, 0x04	; 4
     84e:	88 b9       	out	0x08, r24	; 8

			UART_write_txt("Modo online activado\n\r");       // Mensaje modo online activado
     850:	88 ef       	ldi	r24, 0xF8	; 248
     852:	93 e0       	ldi	r25, 0x03	; 3
     854:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
			UART_write_txt("Ahora puede mover los sliders\n\r");
     858:	8f e0       	ldi	r24, 0x0F	; 15
     85a:	94 e0       	ldi	r25, 0x04	; 4
     85c:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>

			online = 0;  // Indicador modo online activo
     860:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__data_end>

			while (online == 0) {  // Bucle para modo online
     864:	8d c0       	rjmp	.+282    	; 0x980 <__stack+0x81>
				ComandoUART comando;
				UART_read_txt(buffer, 32);  // Lee comando UART en buffer
     866:	60 e2       	ldi	r22, 0x20	; 32
     868:	82 eb       	ldi	r24, 0xB2	; 178
     86a:	94 e0       	ldi	r25, 0x04	; 4
     86c:	0e 94 a0 00 	call	0x140	; 0x140 <UART_read_txt>

				if (UART_parse_comando(buffer, &comando)) {  // Si el comando está bien parseado
     870:	be 01       	movw	r22, r28
     872:	65 5f       	subi	r22, 0xF5	; 245
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	82 eb       	ldi	r24, 0xB2	; 178
     878:	94 e0       	ldi	r25, 0x04	; 4
     87a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <UART_parse_comando>
     87e:	88 23       	and	r24, r24
     880:	09 f4       	brne	.+2      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     882:	5b c0       	rjmp	.+182    	; 0x93a <__stack+0x3b>
					UART_write_txt("ID: ");
     884:	8f e2       	ldi	r24, 0x2F	; 47
     886:	94 e0       	ldi	r25, 0x04	; 4
     888:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt(comando.id);
     88c:	ce 01       	movw	r24, r28
     88e:	0b 96       	adiw	r24, 0x0b	; 11
     890:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("\nValor: ");
     894:	84 e3       	ldi	r24, 0x34	; 52
     896:	94 e0       	ldi	r25, 0x04	; 4
     898:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>

					char num[10];
					itoa(comando.value, num, 10);    // Convierte valor a string
     89c:	4a e0       	ldi	r20, 0x0A	; 10
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	be 01       	movw	r22, r28
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	8e 85       	ldd	r24, Y+14	; 0x0e
     8a8:	9f 85       	ldd	r25, Y+15	; 0x0f
     8aa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <itoa>
					UART_write_txt(num);
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write('\n');
     8b6:	8a e0       	ldi	r24, 0x0A	; 10
     8b8:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_write>

					// Selecciona qué servo o actuador mover según comando.id
					switch (comando.id[1]) {
     8bc:	8c 85       	ldd	r24, Y+12	; 0x0c
     8be:	82 33       	cpi	r24, 0x32	; 50
     8c0:	a1 f0       	breq	.+40     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
     8c2:	18 f4       	brcc	.+6      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
     8c4:	81 33       	cpi	r24, 0x31	; 49
     8c6:	31 f0       	breq	.+12     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
     8c8:	33 c0       	rjmp	.+102    	; 0x930 <__stack+0x31>
     8ca:	83 33       	cpi	r24, 0x33	; 51
     8cc:	c9 f0       	breq	.+50     	; 0x900 <__stack+0x1>
     8ce:	84 33       	cpi	r24, 0x34	; 52
     8d0:	19 f1       	breq	.+70     	; 0x918 <__stack+0x19>
     8d2:	2e c0       	rjmp	.+92     	; 0x930 <__stack+0x31>
						case '1':
						servo_writeA(comando.value);    // Mueve servo A
     8d4:	6e 85       	ldd	r22, Y+14	; 0x0e
     8d6:	7f 85       	ldd	r23, Y+15	; 0x0f
     8d8:	07 2e       	mov	r0, r23
     8da:	00 0c       	add	r0, r0
     8dc:	88 0b       	sbc	r24, r24
     8de:	99 0b       	sbc	r25, r25
     8e0:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__floatsisf>
     8e4:	0e 94 bb 05 	call	0xb76	; 0xb76 <servo_writeA>
						break;
     8e8:	4b c0       	rjmp	.+150    	; 0x980 <__stack+0x81>
						case '2':
						servo_writeB(comando.value);    // Mueve servo B
     8ea:	6e 85       	ldd	r22, Y+14	; 0x0e
     8ec:	7f 85       	ldd	r23, Y+15	; 0x0f
     8ee:	07 2e       	mov	r0, r23
     8f0:	00 0c       	add	r0, r0
     8f2:	88 0b       	sbc	r24, r24
     8f4:	99 0b       	sbc	r25, r25
     8f6:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__floatsisf>
     8fa:	0e 94 ed 05 	call	0xbda	; 0xbda <servo_writeB>
						break;
     8fe:	40 c0       	rjmp	.+128    	; 0x980 <__stack+0x81>
						case '3':
						PWM0_dca(comando.value, NO_INVERTING);   // PWM0 canal A
     900:	6e 85       	ldd	r22, Y+14	; 0x0e
     902:	7f 85       	ldd	r23, Y+15	; 0x0f
     904:	07 2e       	mov	r0, r23
     906:	00 0c       	add	r0, r0
     908:	88 0b       	sbc	r24, r24
     90a:	99 0b       	sbc	r25, r25
     90c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__floatsisf>
     910:	41 e0       	ldi	r20, 0x01	; 1
     912:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PWM0_dca>
						break;
     916:	34 c0       	rjmp	.+104    	; 0x980 <__stack+0x81>
						case '4':
						PWM0_dcb(comando.value, NO_INVERTING);   // PWM0 canal B
     918:	6e 85       	ldd	r22, Y+14	; 0x0e
     91a:	7f 85       	ldd	r23, Y+15	; 0x0f
     91c:	07 2e       	mov	r0, r23
     91e:	00 0c       	add	r0, r0
     920:	88 0b       	sbc	r24, r24
     922:	99 0b       	sbc	r25, r25
     924:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__floatsisf>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	0e 94 15 05 	call	0xa2a	; 0xa2a <PWM0_dcb>
						break;
     92e:	28 c0       	rjmp	.+80     	; 0x980 <__stack+0x81>
						default:
						UART_write_txt("Modo online desactivado\n");  // ID inválido termina modo
     930:	8d e3       	ldi	r24, 0x3D	; 61
     932:	94 e0       	ldi	r25, 0x04	; 4
     934:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
						break;
     938:	23 c0       	rjmp	.+70     	; 0x980 <__stack+0x81>
					}
					} else {
					dato = 0;
     93a:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <dato>
					UART_write_txt("\r\n");
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Desea salir del modo online? \n\r");
     946:	86 e5       	ldi	r24, 0x56	; 86
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("Si (1) \n\r");
     94e:	86 e7       	ldi	r24, 0x76	; 118
     950:	94 e0       	ldi	r25, 0x04	; 4
     952:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
					UART_write_txt("No (Cualquier otro caracter) \n\r");
     956:	80 e8       	ldi	r24, 0x80	; 128
     958:	94 e0       	ldi	r25, 0x04	; 4
     95a:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>

					while (dato == 0) {  // Espera respuesta para salir modo online
     95e:	04 c0       	rjmp	.+8      	; 0x968 <__stack+0x69>
						dato = UART_read();
     960:	0e 94 97 00 	call	0x12e	; 0x12e <UART_read>
     964:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <dato>
					UART_write_txt("\r\n");
					UART_write_txt("Desea salir del modo online? \n\r");
					UART_write_txt("Si (1) \n\r");
					UART_write_txt("No (Cualquier otro caracter) \n\r");

					while (dato == 0) {  // Espera respuesta para salir modo online
     968:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <dato>
     96c:	88 23       	and	r24, r24
     96e:	c1 f3       	breq	.-16     	; 0x960 <__stack+0x61>
						dato = UART_read();
					}

					if (dato == 49) {  // Si presiona '1', salir modo online
     970:	81 33       	cpi	r24, 0x31	; 49
     972:	21 f4       	brne	.+8      	; 0x97c <__stack+0x7d>
						online = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__data_end>
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x81>
						} else {
						online = 0;  // Continuar en modo online
     97c:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__data_end>
			UART_write_txt("Modo online activado\n\r");       // Mensaje modo online activado
			UART_write_txt("Ahora puede mover los sliders\n\r");

			online = 0;  // Indicador modo online activo

			while (online == 0) {  // Bucle para modo online
     980:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <__data_end>
     984:	88 23       	and	r24, r24
     986:	09 f4       	brne	.+2      	; 0x98a <__stack+0x8b>
     988:	6e cf       	rjmp	.-292    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
     98a:	f0 cc       	rjmp	.-1568   	; 0x36c <main+0x2c>
				}
			}
			break;

			default:
			UART_write_txt("\r\n");
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
			UART_write_txt("Usted se encuentra en modo manual \n\r");
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
			UART_write_txt("- Modo EEPROM (Presionar 1) \n\r");
     99c:	88 e2       	ldi	r24, 0x28	; 40
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
			UART_write_txt("- Modo Online (Presionar 2) \n\r");
     9a4:	87 e4       	ldi	r24, 0x47	; 71
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
     9ac:	df cc       	rjmp	.-1602   	; 0x36c <main+0x2c>

000009ae <PWM0_init>:
#include "PWM0.h"

void PWM0_init(void)
{
	// Modo Fast PWM
	TCCR0B &= ~(1<<WGM02);
     9ae:	85 b5       	in	r24, 0x25	; 37
     9b0:	87 7f       	andi	r24, 0xF7	; 247
     9b2:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<WGM01);
     9b4:	84 b5       	in	r24, 0x24	; 36
     9b6:	82 60       	ori	r24, 0x02	; 2
     9b8:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
     9ba:	84 b5       	in	r24, 0x24	; 36
     9bc:	81 60       	ori	r24, 0x01	; 1
     9be:	84 bd       	out	0x24, r24	; 36
	
	// Prescalador 64
	TCCR0B |= (1<<CS02);
     9c0:	85 b5       	in	r24, 0x25	; 37
     9c2:	84 60       	ori	r24, 0x04	; 4
     9c4:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     9c6:	85 b5       	in	r24, 0x25	; 37
     9c8:	8d 7f       	andi	r24, 0xFD	; 253
     9ca:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
     9cc:	85 b5       	in	r24, 0x25	; 37
     9ce:	81 60       	ori	r24, 0x01	; 1
     9d0:	85 bd       	out	0x25, r24	; 37
     9d2:	08 95       	ret

000009d4 <PWM0_dca>:
}

void PWM0_dca(float dc, uint8_t modo)
{
	if(modo == 1)
     9d4:	41 30       	cpi	r20, 0x01	; 1
     9d6:	39 f4       	brne	.+14     	; 0x9e6 <PWM0_dca+0x12>
	{
		TCCR0A |= (1<<COM0A1);
     9d8:	24 b5       	in	r18, 0x24	; 36
     9da:	20 68       	ori	r18, 0x80	; 128
     9dc:	24 bd       	out	0x24, r18	; 36
		TCCR0A &= ~(1<<COM0A0);
     9de:	24 b5       	in	r18, 0x24	; 36
     9e0:	2f 7b       	andi	r18, 0xBF	; 191
     9e2:	24 bd       	out	0x24, r18	; 36
     9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <PWM0_dca+0x1e>
	}
	else
	{
		TCCR0A |= (1<<COM0A1);
     9e6:	24 b5       	in	r18, 0x24	; 36
     9e8:	20 68       	ori	r18, 0x80	; 128
     9ea:	24 bd       	out	0x24, r18	; 36
		TCCR0A |= (1<<COM0A0);
     9ec:	24 b5       	in	r18, 0x24	; 36
     9ee:	20 64       	ori	r18, 0x40	; 64
     9f0:	24 bd       	out	0x24, r18	; 36
		
	}
	dc = (dc * 100)/1023;
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	48 ec       	ldi	r20, 0xC8	; 200
     9f8:	52 e4       	ldi	r21, 0x42	; 66
     9fa:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 ec       	ldi	r19, 0xC0	; 192
     a02:	4f e7       	ldi	r20, 0x7F	; 127
     a04:	54 e4       	ldi	r21, 0x44	; 68
     a06:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
	OCR0A = (dc * 35) / 100;
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	4c e0       	ldi	r20, 0x0C	; 12
     a10:	52 e4       	ldi	r21, 0x42	; 66
     a12:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	48 ec       	ldi	r20, 0xC8	; 200
     a1c:	52 e4       	ldi	r21, 0x42	; 66
     a1e:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     a22:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     a26:	67 bd       	out	0x27, r22	; 39
     a28:	08 95       	ret

00000a2a <PWM0_dcb>:
}

void PWM0_dcb(float dc, uint8_t modo)
{
	if(modo == 1)
     a2a:	41 30       	cpi	r20, 0x01	; 1
     a2c:	39 f4       	brne	.+14     	; 0xa3c <PWM0_dcb+0x12>
	{
		TCCR0A |= (1<<COM0B1);
     a2e:	24 b5       	in	r18, 0x24	; 36
     a30:	20 62       	ori	r18, 0x20	; 32
     a32:	24 bd       	out	0x24, r18	; 36
		TCCR0A &= ~(1<<COM0B0);
     a34:	24 b5       	in	r18, 0x24	; 36
     a36:	2f 7e       	andi	r18, 0xEF	; 239
     a38:	24 bd       	out	0x24, r18	; 36
     a3a:	06 c0       	rjmp	.+12     	; 0xa48 <PWM0_dcb+0x1e>
	}
	else
	{
		TCCR0A |= (1<<COM0B1);
     a3c:	24 b5       	in	r18, 0x24	; 36
     a3e:	20 62       	ori	r18, 0x20	; 32
     a40:	24 bd       	out	0x24, r18	; 36
		TCCR0A |= (1<<COM0B0);
     a42:	24 b5       	in	r18, 0x24	; 36
     a44:	20 61       	ori	r18, 0x10	; 16
     a46:	24 bd       	out	0x24, r18	; 36
		
	}
	dc = (dc * 100)/1023;
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	48 ec       	ldi	r20, 0xC8	; 200
     a4e:	52 e4       	ldi	r21, 0x42	; 66
     a50:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 ec       	ldi	r19, 0xC0	; 192
     a58:	4f e7       	ldi	r20, 0x7F	; 127
     a5a:	54 e4       	ldi	r21, 0x44	; 68
     a5c:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
	OCR0B = (dc * 35) / 100;
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	4c e0       	ldi	r20, 0x0C	; 12
     a66:	52 e4       	ldi	r21, 0x42	; 66
     a68:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3>
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	48 ec       	ldi	r20, 0xC8	; 200
     a72:	52 e4       	ldi	r21, 0x42	; 66
     a74:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     a78:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     a7c:	68 bd       	out	0x28, r22	; 40
     a7e:	08 95       	ret

00000a80 <PWM1_init>:
#include "PWM1.h"

void PWM1_init(void){
	DDRB |= ( 1<< PB1 )|(1<<PB2);
     a80:	84 b1       	in	r24, 0x04	; 4
     a82:	86 60       	ori	r24, 0x06	; 6
     a84:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0; // reset
     a86:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     a8a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 39999; // TOP
     a8e:	8f e3       	ldi	r24, 0x3F	; 63
     a90:	9c e9       	ldi	r25, 0x9C	; 156
     a92:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     a96:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ; // low --> Compare Match
     a9a:	e0 e8       	ldi	r30, 0x80	; 128
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 ea       	ldi	r24, 0xA0	; 160
     aa0:	80 83       	st	Z, r24
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM TOP ICR1
     aa2:	80 81       	ld	r24, Z
     aa4:	82 60       	ori	r24, 0x02	; 2
     aa6:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Fast PWM TOP ICR1
     aa8:	e1 e8       	ldi	r30, 0x81	; 129
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	88 e1       	ldi	r24, 0x18	; 24
     aae:	80 83       	st	Z, r24
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Prescaler 8
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
     ab6:	08 95       	ret

00000ab8 <map>:
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
}
void servo_writeB(float adc_Value){
	OCR1B = map(adc_Value, 0, 1024, 1000, 4800);
}
float map(float x, float in_min, float in_max, float out_min, float out_max){
     ab8:	4f 92       	push	r4
     aba:	5f 92       	push	r5
     abc:	6f 92       	push	r6
     abe:	7f 92       	push	r7
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
     ad8:	28 97       	sbiw	r28, 0x08	; 8
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	29 01       	movw	r4, r18
     ae6:	3a 01       	movw	r6, r20
     ae8:	ed 82       	std	Y+5, r14	; 0x05
     aea:	fe 82       	std	Y+6, r15	; 0x06
     aec:	0f 83       	std	Y+7, r16	; 0x07
     aee:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
     af0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__subsf3>
     af4:	69 83       	std	Y+1, r22	; 0x01
     af6:	7a 83       	std	Y+2, r23	; 0x02
     af8:	8b 83       	std	Y+3, r24	; 0x03
     afa:	9c 83       	std	Y+4, r25	; 0x04
     afc:	a6 01       	movw	r20, r12
     afe:	95 01       	movw	r18, r10
     b00:	69 8d       	ldd	r22, Y+25	; 0x19
     b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b08:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__subsf3>
     b0c:	9b 01       	movw	r18, r22
     b0e:	ac 01       	movw	r20, r24
     b10:	69 81       	ldd	r22, Y+1	; 0x01
     b12:	7a 81       	ldd	r23, Y+2	; 0x02
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3>
     b1c:	69 83       	std	Y+1, r22	; 0x01
     b1e:	7a 83       	std	Y+2, r23	; 0x02
     b20:	8b 83       	std	Y+3, r24	; 0x03
     b22:	9c 83       	std	Y+4, r25	; 0x04
     b24:	a3 01       	movw	r20, r6
     b26:	92 01       	movw	r18, r4
     b28:	c8 01       	movw	r24, r16
     b2a:	b7 01       	movw	r22, r14
     b2c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__subsf3>
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	69 81       	ldd	r22, Y+1	; 0x01
     b36:	7a 81       	ldd	r23, Y+2	; 0x02
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	c6 01       	movw	r24, r12
     b46:	b5 01       	movw	r22, r10
     b48:	0e 94 20 06 	call	0xc40	; 0xc40 <__addsf3>
     b4c:	28 96       	adiw	r28, 0x08	; 8
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	bf 90       	pop	r11
     b6a:	af 90       	pop	r10
     b6c:	7f 90       	pop	r7
     b6e:	6f 90       	pop	r6
     b70:	5f 90       	pop	r5
     b72:	4f 90       	pop	r4
     b74:	08 95       	ret

00000b76 <servo_writeA>:
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ; // low --> Compare Match
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM TOP ICR1
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Fast PWM TOP ICR1
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Prescaler 8
}
void servo_writeA(float adc_Value){
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
     b86:	25 e4       	ldi	r18, 0x45	; 69
     b88:	2f 93       	push	r18
     b8a:	26 e9       	ldi	r18, 0x96	; 150
     b8c:	2f 93       	push	r18
     b8e:	1f 92       	push	r1
     b90:	1f 92       	push	r1
     b92:	0f 2e       	mov	r0, r31
     b94:	a1 2c       	mov	r10, r1
     b96:	b1 2c       	mov	r11, r1
     b98:	fa e7       	ldi	r31, 0x7A	; 122
     b9a:	cf 2e       	mov	r12, r31
     b9c:	f4 e4       	ldi	r31, 0x44	; 68
     b9e:	df 2e       	mov	r13, r31
     ba0:	f0 2d       	mov	r31, r0
     ba2:	e1 2c       	mov	r14, r1
     ba4:	f1 2c       	mov	r15, r1
     ba6:	00 e8       	ldi	r16, 0x80	; 128
     ba8:	14 e4       	ldi	r17, 0x44	; 68
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	a9 01       	movw	r20, r18
     bb0:	0e 94 5c 05 	call	0xab8	; 0xab8 <map>
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     bc0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     bc4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	bf 90       	pop	r11
     bd6:	af 90       	pop	r10
     bd8:	08 95       	ret

00000bda <servo_writeB>:
void servo_writeB(float adc_Value){
     bda:	af 92       	push	r10
     bdc:	bf 92       	push	r11
     bde:	cf 92       	push	r12
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
	OCR1B = map(adc_Value, 0, 1024, 1000, 4800);
     bea:	25 e4       	ldi	r18, 0x45	; 69
     bec:	2f 93       	push	r18
     bee:	26 e9       	ldi	r18, 0x96	; 150
     bf0:	2f 93       	push	r18
     bf2:	1f 92       	push	r1
     bf4:	1f 92       	push	r1
     bf6:	0f 2e       	mov	r0, r31
     bf8:	a1 2c       	mov	r10, r1
     bfa:	b1 2c       	mov	r11, r1
     bfc:	fa e7       	ldi	r31, 0x7A	; 122
     bfe:	cf 2e       	mov	r12, r31
     c00:	f4 e4       	ldi	r31, 0x44	; 68
     c02:	df 2e       	mov	r13, r31
     c04:	f0 2d       	mov	r31, r0
     c06:	e1 2c       	mov	r14, r1
     c08:	f1 2c       	mov	r15, r1
     c0a:	00 e8       	ldi	r16, 0x80	; 128
     c0c:	14 e4       	ldi	r17, 0x44	; 68
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	a9 01       	movw	r20, r18
     c14:	0e 94 5c 05 	call	0xab8	; 0xab8 <map>
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     c24:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     c28:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	bf 90       	pop	r11
     c3a:	af 90       	pop	r10
     c3c:	08 95       	ret

00000c3e <__subsf3>:
     c3e:	50 58       	subi	r21, 0x80	; 128

00000c40 <__addsf3>:
     c40:	bb 27       	eor	r27, r27
     c42:	aa 27       	eor	r26, r26
     c44:	0e 94 37 06 	call	0xc6e	; 0xc6e <__addsf3x>
     c48:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_round>
     c4c:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_pscA>
     c50:	38 f0       	brcs	.+14     	; 0xc60 <__addsf3+0x20>
     c52:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscB>
     c56:	20 f0       	brcs	.+8      	; 0xc60 <__addsf3+0x20>
     c58:	39 f4       	brne	.+14     	; 0xc68 <__addsf3+0x28>
     c5a:	9f 3f       	cpi	r25, 0xFF	; 255
     c5c:	19 f4       	brne	.+6      	; 0xc64 <__addsf3+0x24>
     c5e:	26 f4       	brtc	.+8      	; 0xc68 <__addsf3+0x28>
     c60:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__fp_nan>
     c64:	0e f4       	brtc	.+2      	; 0xc68 <__addsf3+0x28>
     c66:	e0 95       	com	r30
     c68:	e7 fb       	bst	r30, 7
     c6a:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>

00000c6e <__addsf3x>:
     c6e:	e9 2f       	mov	r30, r25
     c70:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_split3>
     c74:	58 f3       	brcs	.-42     	; 0xc4c <__addsf3+0xc>
     c76:	ba 17       	cp	r27, r26
     c78:	62 07       	cpc	r22, r18
     c7a:	73 07       	cpc	r23, r19
     c7c:	84 07       	cpc	r24, r20
     c7e:	95 07       	cpc	r25, r21
     c80:	20 f0       	brcs	.+8      	; 0xc8a <__addsf3x+0x1c>
     c82:	79 f4       	brne	.+30     	; 0xca2 <__addsf3x+0x34>
     c84:	a6 f5       	brtc	.+104    	; 0xcee <__addsf3x+0x80>
     c86:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_zero>
     c8a:	0e f4       	brtc	.+2      	; 0xc8e <__addsf3x+0x20>
     c8c:	e0 95       	com	r30
     c8e:	0b 2e       	mov	r0, r27
     c90:	ba 2f       	mov	r27, r26
     c92:	a0 2d       	mov	r26, r0
     c94:	0b 01       	movw	r0, r22
     c96:	b9 01       	movw	r22, r18
     c98:	90 01       	movw	r18, r0
     c9a:	0c 01       	movw	r0, r24
     c9c:	ca 01       	movw	r24, r20
     c9e:	a0 01       	movw	r20, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	ff 27       	eor	r31, r31
     ca4:	59 1b       	sub	r21, r25
     ca6:	99 f0       	breq	.+38     	; 0xcce <__addsf3x+0x60>
     ca8:	59 3f       	cpi	r21, 0xF9	; 249
     caa:	50 f4       	brcc	.+20     	; 0xcc0 <__addsf3x+0x52>
     cac:	50 3e       	cpi	r21, 0xE0	; 224
     cae:	68 f1       	brcs	.+90     	; 0xd0a <__addsf3x+0x9c>
     cb0:	1a 16       	cp	r1, r26
     cb2:	f0 40       	sbci	r31, 0x00	; 0
     cb4:	a2 2f       	mov	r26, r18
     cb6:	23 2f       	mov	r18, r19
     cb8:	34 2f       	mov	r19, r20
     cba:	44 27       	eor	r20, r20
     cbc:	58 5f       	subi	r21, 0xF8	; 248
     cbe:	f3 cf       	rjmp	.-26     	; 0xca6 <__addsf3x+0x38>
     cc0:	46 95       	lsr	r20
     cc2:	37 95       	ror	r19
     cc4:	27 95       	ror	r18
     cc6:	a7 95       	ror	r26
     cc8:	f0 40       	sbci	r31, 0x00	; 0
     cca:	53 95       	inc	r21
     ccc:	c9 f7       	brne	.-14     	; 0xcc0 <__addsf3x+0x52>
     cce:	7e f4       	brtc	.+30     	; 0xcee <__addsf3x+0x80>
     cd0:	1f 16       	cp	r1, r31
     cd2:	ba 0b       	sbc	r27, r26
     cd4:	62 0b       	sbc	r22, r18
     cd6:	73 0b       	sbc	r23, r19
     cd8:	84 0b       	sbc	r24, r20
     cda:	ba f0       	brmi	.+46     	; 0xd0a <__addsf3x+0x9c>
     cdc:	91 50       	subi	r25, 0x01	; 1
     cde:	a1 f0       	breq	.+40     	; 0xd08 <__addsf3x+0x9a>
     ce0:	ff 0f       	add	r31, r31
     ce2:	bb 1f       	adc	r27, r27
     ce4:	66 1f       	adc	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	88 1f       	adc	r24, r24
     cea:	c2 f7       	brpl	.-16     	; 0xcdc <__addsf3x+0x6e>
     cec:	0e c0       	rjmp	.+28     	; 0xd0a <__addsf3x+0x9c>
     cee:	ba 0f       	add	r27, r26
     cf0:	62 1f       	adc	r22, r18
     cf2:	73 1f       	adc	r23, r19
     cf4:	84 1f       	adc	r24, r20
     cf6:	48 f4       	brcc	.+18     	; 0xd0a <__addsf3x+0x9c>
     cf8:	87 95       	ror	r24
     cfa:	77 95       	ror	r23
     cfc:	67 95       	ror	r22
     cfe:	b7 95       	ror	r27
     d00:	f7 95       	ror	r31
     d02:	9e 3f       	cpi	r25, 0xFE	; 254
     d04:	08 f0       	brcs	.+2      	; 0xd08 <__addsf3x+0x9a>
     d06:	b0 cf       	rjmp	.-160    	; 0xc68 <__addsf3+0x28>
     d08:	93 95       	inc	r25
     d0a:	88 0f       	add	r24, r24
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <__addsf3x+0xa2>
     d0e:	99 27       	eor	r25, r25
     d10:	ee 0f       	add	r30, r30
     d12:	97 95       	ror	r25
     d14:	87 95       	ror	r24
     d16:	08 95       	ret

00000d18 <__divsf3>:
     d18:	0e 94 a0 06 	call	0xd40	; 0xd40 <__divsf3x>
     d1c:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_round>
     d20:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscB>
     d24:	58 f0       	brcs	.+22     	; 0xd3c <__divsf3+0x24>
     d26:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_pscA>
     d2a:	40 f0       	brcs	.+16     	; 0xd3c <__divsf3+0x24>
     d2c:	29 f4       	brne	.+10     	; 0xd38 <__divsf3+0x20>
     d2e:	5f 3f       	cpi	r21, 0xFF	; 255
     d30:	29 f0       	breq	.+10     	; 0xd3c <__divsf3+0x24>
     d32:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>
     d36:	51 11       	cpse	r21, r1
     d38:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_szero>
     d3c:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__fp_nan>

00000d40 <__divsf3x>:
     d40:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_split3>
     d44:	68 f3       	brcs	.-38     	; 0xd20 <__divsf3+0x8>

00000d46 <__divsf3_pse>:
     d46:	99 23       	and	r25, r25
     d48:	b1 f3       	breq	.-20     	; 0xd36 <__divsf3+0x1e>
     d4a:	55 23       	and	r21, r21
     d4c:	91 f3       	breq	.-28     	; 0xd32 <__divsf3+0x1a>
     d4e:	95 1b       	sub	r25, r21
     d50:	55 0b       	sbc	r21, r21
     d52:	bb 27       	eor	r27, r27
     d54:	aa 27       	eor	r26, r26
     d56:	62 17       	cp	r22, r18
     d58:	73 07       	cpc	r23, r19
     d5a:	84 07       	cpc	r24, r20
     d5c:	38 f0       	brcs	.+14     	; 0xd6c <__divsf3_pse+0x26>
     d5e:	9f 5f       	subi	r25, 0xFF	; 255
     d60:	5f 4f       	sbci	r21, 0xFF	; 255
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	44 1f       	adc	r20, r20
     d68:	aa 1f       	adc	r26, r26
     d6a:	a9 f3       	breq	.-22     	; 0xd56 <__divsf3_pse+0x10>
     d6c:	35 d0       	rcall	.+106    	; 0xdd8 <__divsf3_pse+0x92>
     d6e:	0e 2e       	mov	r0, r30
     d70:	3a f0       	brmi	.+14     	; 0xd80 <__divsf3_pse+0x3a>
     d72:	e0 e8       	ldi	r30, 0x80	; 128
     d74:	32 d0       	rcall	.+100    	; 0xdda <__divsf3_pse+0x94>
     d76:	91 50       	subi	r25, 0x01	; 1
     d78:	50 40       	sbci	r21, 0x00	; 0
     d7a:	e6 95       	lsr	r30
     d7c:	00 1c       	adc	r0, r0
     d7e:	ca f7       	brpl	.-14     	; 0xd72 <__divsf3_pse+0x2c>
     d80:	2b d0       	rcall	.+86     	; 0xdd8 <__divsf3_pse+0x92>
     d82:	fe 2f       	mov	r31, r30
     d84:	29 d0       	rcall	.+82     	; 0xdd8 <__divsf3_pse+0x92>
     d86:	66 0f       	add	r22, r22
     d88:	77 1f       	adc	r23, r23
     d8a:	88 1f       	adc	r24, r24
     d8c:	bb 1f       	adc	r27, r27
     d8e:	26 17       	cp	r18, r22
     d90:	37 07       	cpc	r19, r23
     d92:	48 07       	cpc	r20, r24
     d94:	ab 07       	cpc	r26, r27
     d96:	b0 e8       	ldi	r27, 0x80	; 128
     d98:	09 f0       	breq	.+2      	; 0xd9c <__divsf3_pse+0x56>
     d9a:	bb 0b       	sbc	r27, r27
     d9c:	80 2d       	mov	r24, r0
     d9e:	bf 01       	movw	r22, r30
     da0:	ff 27       	eor	r31, r31
     da2:	93 58       	subi	r25, 0x83	; 131
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	3a f0       	brmi	.+14     	; 0xdb6 <__divsf3_pse+0x70>
     da8:	9e 3f       	cpi	r25, 0xFE	; 254
     daa:	51 05       	cpc	r21, r1
     dac:	78 f0       	brcs	.+30     	; 0xdcc <__divsf3_pse+0x86>
     dae:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>
     db2:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_szero>
     db6:	5f 3f       	cpi	r21, 0xFF	; 255
     db8:	e4 f3       	brlt	.-8      	; 0xdb2 <__divsf3_pse+0x6c>
     dba:	98 3e       	cpi	r25, 0xE8	; 232
     dbc:	d4 f3       	brlt	.-12     	; 0xdb2 <__divsf3_pse+0x6c>
     dbe:	86 95       	lsr	r24
     dc0:	77 95       	ror	r23
     dc2:	67 95       	ror	r22
     dc4:	b7 95       	ror	r27
     dc6:	f7 95       	ror	r31
     dc8:	9f 5f       	subi	r25, 0xFF	; 255
     dca:	c9 f7       	brne	.-14     	; 0xdbe <__divsf3_pse+0x78>
     dcc:	88 0f       	add	r24, r24
     dce:	91 1d       	adc	r25, r1
     dd0:	96 95       	lsr	r25
     dd2:	87 95       	ror	r24
     dd4:	97 f9       	bld	r25, 7
     dd6:	08 95       	ret
     dd8:	e1 e0       	ldi	r30, 0x01	; 1
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	88 1f       	adc	r24, r24
     de0:	bb 1f       	adc	r27, r27
     de2:	62 17       	cp	r22, r18
     de4:	73 07       	cpc	r23, r19
     de6:	84 07       	cpc	r24, r20
     de8:	ba 07       	cpc	r27, r26
     dea:	20 f0       	brcs	.+8      	; 0xdf4 <__divsf3_pse+0xae>
     dec:	62 1b       	sub	r22, r18
     dee:	73 0b       	sbc	r23, r19
     df0:	84 0b       	sbc	r24, r20
     df2:	ba 0b       	sbc	r27, r26
     df4:	ee 1f       	adc	r30, r30
     df6:	88 f7       	brcc	.-30     	; 0xdda <__divsf3_pse+0x94>
     df8:	e0 95       	com	r30
     dfa:	08 95       	ret

00000dfc <__fixunssfsi>:
     dfc:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_splitA>
     e00:	88 f0       	brcs	.+34     	; 0xe24 <__fixunssfsi+0x28>
     e02:	9f 57       	subi	r25, 0x7F	; 127
     e04:	98 f0       	brcs	.+38     	; 0xe2c <__fixunssfsi+0x30>
     e06:	b9 2f       	mov	r27, r25
     e08:	99 27       	eor	r25, r25
     e0a:	b7 51       	subi	r27, 0x17	; 23
     e0c:	b0 f0       	brcs	.+44     	; 0xe3a <__fixunssfsi+0x3e>
     e0e:	e1 f0       	breq	.+56     	; 0xe48 <__fixunssfsi+0x4c>
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	1a f0       	brmi	.+6      	; 0xe20 <__fixunssfsi+0x24>
     e1a:	ba 95       	dec	r27
     e1c:	c9 f7       	brne	.-14     	; 0xe10 <__fixunssfsi+0x14>
     e1e:	14 c0       	rjmp	.+40     	; 0xe48 <__fixunssfsi+0x4c>
     e20:	b1 30       	cpi	r27, 0x01	; 1
     e22:	91 f0       	breq	.+36     	; 0xe48 <__fixunssfsi+0x4c>
     e24:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_zero>
     e28:	b1 e0       	ldi	r27, 0x01	; 1
     e2a:	08 95       	ret
     e2c:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_zero>
     e30:	67 2f       	mov	r22, r23
     e32:	78 2f       	mov	r23, r24
     e34:	88 27       	eor	r24, r24
     e36:	b8 5f       	subi	r27, 0xF8	; 248
     e38:	39 f0       	breq	.+14     	; 0xe48 <__fixunssfsi+0x4c>
     e3a:	b9 3f       	cpi	r27, 0xF9	; 249
     e3c:	cc f3       	brlt	.-14     	; 0xe30 <__fixunssfsi+0x34>
     e3e:	86 95       	lsr	r24
     e40:	77 95       	ror	r23
     e42:	67 95       	ror	r22
     e44:	b3 95       	inc	r27
     e46:	d9 f7       	brne	.-10     	; 0xe3e <__fixunssfsi+0x42>
     e48:	3e f4       	brtc	.+14     	; 0xe58 <__fixunssfsi+0x5c>
     e4a:	90 95       	com	r25
     e4c:	80 95       	com	r24
     e4e:	70 95       	com	r23
     e50:	61 95       	neg	r22
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	8f 4f       	sbci	r24, 0xFF	; 255
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	08 95       	ret

00000e5a <__floatunsisf>:
     e5a:	e8 94       	clt
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <__floatsisf+0x12>

00000e5e <__floatsisf>:
     e5e:	97 fb       	bst	r25, 7
     e60:	3e f4       	brtc	.+14     	; 0xe70 <__floatsisf+0x12>
     e62:	90 95       	com	r25
     e64:	80 95       	com	r24
     e66:	70 95       	com	r23
     e68:	61 95       	neg	r22
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	8f 4f       	sbci	r24, 0xFF	; 255
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	99 23       	and	r25, r25
     e72:	a9 f0       	breq	.+42     	; 0xe9e <__floatsisf+0x40>
     e74:	f9 2f       	mov	r31, r25
     e76:	96 e9       	ldi	r25, 0x96	; 150
     e78:	bb 27       	eor	r27, r27
     e7a:	93 95       	inc	r25
     e7c:	f6 95       	lsr	r31
     e7e:	87 95       	ror	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b7 95       	ror	r27
     e86:	f1 11       	cpse	r31, r1
     e88:	f8 cf       	rjmp	.-16     	; 0xe7a <__floatsisf+0x1c>
     e8a:	fa f4       	brpl	.+62     	; 0xeca <__floatsisf+0x6c>
     e8c:	bb 0f       	add	r27, r27
     e8e:	11 f4       	brne	.+4      	; 0xe94 <__floatsisf+0x36>
     e90:	60 ff       	sbrs	r22, 0
     e92:	1b c0       	rjmp	.+54     	; 0xeca <__floatsisf+0x6c>
     e94:	6f 5f       	subi	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	16 c0       	rjmp	.+44     	; 0xeca <__floatsisf+0x6c>
     e9e:	88 23       	and	r24, r24
     ea0:	11 f0       	breq	.+4      	; 0xea6 <__floatsisf+0x48>
     ea2:	96 e9       	ldi	r25, 0x96	; 150
     ea4:	11 c0       	rjmp	.+34     	; 0xec8 <__floatsisf+0x6a>
     ea6:	77 23       	and	r23, r23
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <__floatsisf+0x54>
     eaa:	9e e8       	ldi	r25, 0x8E	; 142
     eac:	87 2f       	mov	r24, r23
     eae:	76 2f       	mov	r23, r22
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <__floatsisf+0x5e>
     eb2:	66 23       	and	r22, r22
     eb4:	71 f0       	breq	.+28     	; 0xed2 <__floatsisf+0x74>
     eb6:	96 e8       	ldi	r25, 0x86	; 134
     eb8:	86 2f       	mov	r24, r22
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	2a f0       	brmi	.+10     	; 0xeca <__floatsisf+0x6c>
     ec0:	9a 95       	dec	r25
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	da f7       	brpl	.-10     	; 0xec0 <__floatsisf+0x62>
     eca:	88 0f       	add	r24, r24
     ecc:	96 95       	lsr	r25
     ece:	87 95       	ror	r24
     ed0:	97 f9       	bld	r25, 7
     ed2:	08 95       	ret

00000ed4 <__fp_inf>:
     ed4:	97 f9       	bld	r25, 7
     ed6:	9f 67       	ori	r25, 0x7F	; 127
     ed8:	80 e8       	ldi	r24, 0x80	; 128
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	08 95       	ret

00000ee0 <__fp_nan>:
     ee0:	9f ef       	ldi	r25, 0xFF	; 255
     ee2:	80 ec       	ldi	r24, 0xC0	; 192
     ee4:	08 95       	ret

00000ee6 <__fp_pscA>:
     ee6:	00 24       	eor	r0, r0
     ee8:	0a 94       	dec	r0
     eea:	16 16       	cp	r1, r22
     eec:	17 06       	cpc	r1, r23
     eee:	18 06       	cpc	r1, r24
     ef0:	09 06       	cpc	r0, r25
     ef2:	08 95       	ret

00000ef4 <__fp_pscB>:
     ef4:	00 24       	eor	r0, r0
     ef6:	0a 94       	dec	r0
     ef8:	12 16       	cp	r1, r18
     efa:	13 06       	cpc	r1, r19
     efc:	14 06       	cpc	r1, r20
     efe:	05 06       	cpc	r0, r21
     f00:	08 95       	ret

00000f02 <__fp_round>:
     f02:	09 2e       	mov	r0, r25
     f04:	03 94       	inc	r0
     f06:	00 0c       	add	r0, r0
     f08:	11 f4       	brne	.+4      	; 0xf0e <__fp_round+0xc>
     f0a:	88 23       	and	r24, r24
     f0c:	52 f0       	brmi	.+20     	; 0xf22 <__fp_round+0x20>
     f0e:	bb 0f       	add	r27, r27
     f10:	40 f4       	brcc	.+16     	; 0xf22 <__fp_round+0x20>
     f12:	bf 2b       	or	r27, r31
     f14:	11 f4       	brne	.+4      	; 0xf1a <__fp_round+0x18>
     f16:	60 ff       	sbrs	r22, 0
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <__fp_round+0x20>
     f1a:	6f 5f       	subi	r22, 0xFF	; 255
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	08 95       	ret

00000f24 <__fp_split3>:
     f24:	57 fd       	sbrc	r21, 7
     f26:	90 58       	subi	r25, 0x80	; 128
     f28:	44 0f       	add	r20, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	59 f0       	breq	.+22     	; 0xf44 <__fp_splitA+0x10>
     f2e:	5f 3f       	cpi	r21, 0xFF	; 255
     f30:	71 f0       	breq	.+28     	; 0xf4e <__fp_splitA+0x1a>
     f32:	47 95       	ror	r20

00000f34 <__fp_splitA>:
     f34:	88 0f       	add	r24, r24
     f36:	97 fb       	bst	r25, 7
     f38:	99 1f       	adc	r25, r25
     f3a:	61 f0       	breq	.+24     	; 0xf54 <__fp_splitA+0x20>
     f3c:	9f 3f       	cpi	r25, 0xFF	; 255
     f3e:	79 f0       	breq	.+30     	; 0xf5e <__fp_splitA+0x2a>
     f40:	87 95       	ror	r24
     f42:	08 95       	ret
     f44:	12 16       	cp	r1, r18
     f46:	13 06       	cpc	r1, r19
     f48:	14 06       	cpc	r1, r20
     f4a:	55 1f       	adc	r21, r21
     f4c:	f2 cf       	rjmp	.-28     	; 0xf32 <__fp_split3+0xe>
     f4e:	46 95       	lsr	r20
     f50:	f1 df       	rcall	.-30     	; 0xf34 <__fp_splitA>
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <__fp_splitA+0x30>
     f54:	16 16       	cp	r1, r22
     f56:	17 06       	cpc	r1, r23
     f58:	18 06       	cpc	r1, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	f1 cf       	rjmp	.-30     	; 0xf40 <__fp_splitA+0xc>
     f5e:	86 95       	lsr	r24
     f60:	71 05       	cpc	r23, r1
     f62:	61 05       	cpc	r22, r1
     f64:	08 94       	sec
     f66:	08 95       	ret

00000f68 <__fp_zero>:
     f68:	e8 94       	clt

00000f6a <__fp_szero>:
     f6a:	bb 27       	eor	r27, r27
     f6c:	66 27       	eor	r22, r22
     f6e:	77 27       	eor	r23, r23
     f70:	cb 01       	movw	r24, r22
     f72:	97 f9       	bld	r25, 7
     f74:	08 95       	ret

00000f76 <__mulsf3>:
     f76:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__mulsf3x>
     f7a:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_round>
     f7e:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_pscA>
     f82:	38 f0       	brcs	.+14     	; 0xf92 <__mulsf3+0x1c>
     f84:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscB>
     f88:	20 f0       	brcs	.+8      	; 0xf92 <__mulsf3+0x1c>
     f8a:	95 23       	and	r25, r21
     f8c:	11 f0       	breq	.+4      	; 0xf92 <__mulsf3+0x1c>
     f8e:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>
     f92:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__fp_nan>
     f96:	11 24       	eor	r1, r1
     f98:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_szero>

00000f9c <__mulsf3x>:
     f9c:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_split3>
     fa0:	70 f3       	brcs	.-36     	; 0xf7e <__mulsf3+0x8>

00000fa2 <__mulsf3_pse>:
     fa2:	95 9f       	mul	r25, r21
     fa4:	c1 f3       	breq	.-16     	; 0xf96 <__mulsf3+0x20>
     fa6:	95 0f       	add	r25, r21
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	55 1f       	adc	r21, r21
     fac:	62 9f       	mul	r22, r18
     fae:	f0 01       	movw	r30, r0
     fb0:	72 9f       	mul	r23, r18
     fb2:	bb 27       	eor	r27, r27
     fb4:	f0 0d       	add	r31, r0
     fb6:	b1 1d       	adc	r27, r1
     fb8:	63 9f       	mul	r22, r19
     fba:	aa 27       	eor	r26, r26
     fbc:	f0 0d       	add	r31, r0
     fbe:	b1 1d       	adc	r27, r1
     fc0:	aa 1f       	adc	r26, r26
     fc2:	64 9f       	mul	r22, r20
     fc4:	66 27       	eor	r22, r22
     fc6:	b0 0d       	add	r27, r0
     fc8:	a1 1d       	adc	r26, r1
     fca:	66 1f       	adc	r22, r22
     fcc:	82 9f       	mul	r24, r18
     fce:	22 27       	eor	r18, r18
     fd0:	b0 0d       	add	r27, r0
     fd2:	a1 1d       	adc	r26, r1
     fd4:	62 1f       	adc	r22, r18
     fd6:	73 9f       	mul	r23, r19
     fd8:	b0 0d       	add	r27, r0
     fda:	a1 1d       	adc	r26, r1
     fdc:	62 1f       	adc	r22, r18
     fde:	83 9f       	mul	r24, r19
     fe0:	a0 0d       	add	r26, r0
     fe2:	61 1d       	adc	r22, r1
     fe4:	22 1f       	adc	r18, r18
     fe6:	74 9f       	mul	r23, r20
     fe8:	33 27       	eor	r19, r19
     fea:	a0 0d       	add	r26, r0
     fec:	61 1d       	adc	r22, r1
     fee:	23 1f       	adc	r18, r19
     ff0:	84 9f       	mul	r24, r20
     ff2:	60 0d       	add	r22, r0
     ff4:	21 1d       	adc	r18, r1
     ff6:	82 2f       	mov	r24, r18
     ff8:	76 2f       	mov	r23, r22
     ffa:	6a 2f       	mov	r22, r26
     ffc:	11 24       	eor	r1, r1
     ffe:	9f 57       	subi	r25, 0x7F	; 127
    1000:	50 40       	sbci	r21, 0x00	; 0
    1002:	9a f0       	brmi	.+38     	; 0x102a <__mulsf3_pse+0x88>
    1004:	f1 f0       	breq	.+60     	; 0x1042 <__mulsf3_pse+0xa0>
    1006:	88 23       	and	r24, r24
    1008:	4a f0       	brmi	.+18     	; 0x101c <__mulsf3_pse+0x7a>
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	bb 1f       	adc	r27, r27
    1010:	66 1f       	adc	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	88 1f       	adc	r24, r24
    1016:	91 50       	subi	r25, 0x01	; 1
    1018:	50 40       	sbci	r21, 0x00	; 0
    101a:	a9 f7       	brne	.-22     	; 0x1006 <__mulsf3_pse+0x64>
    101c:	9e 3f       	cpi	r25, 0xFE	; 254
    101e:	51 05       	cpc	r21, r1
    1020:	80 f0       	brcs	.+32     	; 0x1042 <__mulsf3_pse+0xa0>
    1022:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>
    1026:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_szero>
    102a:	5f 3f       	cpi	r21, 0xFF	; 255
    102c:	e4 f3       	brlt	.-8      	; 0x1026 <__mulsf3_pse+0x84>
    102e:	98 3e       	cpi	r25, 0xE8	; 232
    1030:	d4 f3       	brlt	.-12     	; 0x1026 <__mulsf3_pse+0x84>
    1032:	86 95       	lsr	r24
    1034:	77 95       	ror	r23
    1036:	67 95       	ror	r22
    1038:	b7 95       	ror	r27
    103a:	f7 95       	ror	r31
    103c:	e7 95       	ror	r30
    103e:	9f 5f       	subi	r25, 0xFF	; 255
    1040:	c1 f7       	brne	.-16     	; 0x1032 <__mulsf3_pse+0x90>
    1042:	fe 2b       	or	r31, r30
    1044:	88 0f       	add	r24, r24
    1046:	91 1d       	adc	r25, r1
    1048:	96 95       	lsr	r25
    104a:	87 95       	ror	r24
    104c:	97 f9       	bld	r25, 7
    104e:	08 95       	ret

00001050 <atoi>:
    1050:	fc 01       	movw	r30, r24
    1052:	88 27       	eor	r24, r24
    1054:	99 27       	eor	r25, r25
    1056:	e8 94       	clt
    1058:	21 91       	ld	r18, Z+
    105a:	20 32       	cpi	r18, 0x20	; 32
    105c:	e9 f3       	breq	.-6      	; 0x1058 <atoi+0x8>
    105e:	29 30       	cpi	r18, 0x09	; 9
    1060:	10 f0       	brcs	.+4      	; 0x1066 <atoi+0x16>
    1062:	2e 30       	cpi	r18, 0x0E	; 14
    1064:	c8 f3       	brcs	.-14     	; 0x1058 <atoi+0x8>
    1066:	2b 32       	cpi	r18, 0x2B	; 43
    1068:	41 f0       	breq	.+16     	; 0x107a <atoi+0x2a>
    106a:	2d 32       	cpi	r18, 0x2D	; 45
    106c:	39 f4       	brne	.+14     	; 0x107c <atoi+0x2c>
    106e:	68 94       	set
    1070:	04 c0       	rjmp	.+8      	; 0x107a <atoi+0x2a>
    1072:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulhi_const_10>
    1076:	82 0f       	add	r24, r18
    1078:	91 1d       	adc	r25, r1
    107a:	21 91       	ld	r18, Z+
    107c:	20 53       	subi	r18, 0x30	; 48
    107e:	2a 30       	cpi	r18, 0x0A	; 10
    1080:	c0 f3       	brcs	.-16     	; 0x1072 <atoi+0x22>
    1082:	1e f4       	brtc	.+6      	; 0x108a <atoi+0x3a>
    1084:	90 95       	com	r25
    1086:	81 95       	neg	r24
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	08 95       	ret

0000108c <strchr>:
    108c:	fc 01       	movw	r30, r24
    108e:	81 91       	ld	r24, Z+
    1090:	86 17       	cp	r24, r22
    1092:	21 f0       	breq	.+8      	; 0x109c <strchr+0x10>
    1094:	88 23       	and	r24, r24
    1096:	d9 f7       	brne	.-10     	; 0x108e <strchr+0x2>
    1098:	99 27       	eor	r25, r25
    109a:	08 95       	ret
    109c:	31 97       	sbiw	r30, 0x01	; 1
    109e:	cf 01       	movw	r24, r30
    10a0:	08 95       	ret

000010a2 <strncpy>:
    10a2:	fb 01       	movw	r30, r22
    10a4:	dc 01       	movw	r26, r24
    10a6:	41 50       	subi	r20, 0x01	; 1
    10a8:	50 40       	sbci	r21, 0x00	; 0
    10aa:	48 f0       	brcs	.+18     	; 0x10be <strncpy+0x1c>
    10ac:	01 90       	ld	r0, Z+
    10ae:	0d 92       	st	X+, r0
    10b0:	00 20       	and	r0, r0
    10b2:	c9 f7       	brne	.-14     	; 0x10a6 <strncpy+0x4>
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <strncpy+0x16>
    10b6:	1d 92       	st	X+, r1
    10b8:	41 50       	subi	r20, 0x01	; 1
    10ba:	50 40       	sbci	r21, 0x00	; 0
    10bc:	e0 f7       	brcc	.-8      	; 0x10b6 <strncpy+0x14>
    10be:	08 95       	ret

000010c0 <itoa>:
    10c0:	45 32       	cpi	r20, 0x25	; 37
    10c2:	51 05       	cpc	r21, r1
    10c4:	20 f4       	brcc	.+8      	; 0x10ce <itoa+0xe>
    10c6:	42 30       	cpi	r20, 0x02	; 2
    10c8:	10 f0       	brcs	.+4      	; 0x10ce <itoa+0xe>
    10ca:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__itoa_ncheck>
    10ce:	fb 01       	movw	r30, r22
    10d0:	10 82       	st	Z, r1
    10d2:	cb 01       	movw	r24, r22
    10d4:	08 95       	ret

000010d6 <__itoa_ncheck>:
    10d6:	bb 27       	eor	r27, r27
    10d8:	4a 30       	cpi	r20, 0x0A	; 10
    10da:	31 f4       	brne	.+12     	; 0x10e8 <__itoa_ncheck+0x12>
    10dc:	99 23       	and	r25, r25
    10de:	22 f4       	brpl	.+8      	; 0x10e8 <__itoa_ncheck+0x12>
    10e0:	bd e2       	ldi	r27, 0x2D	; 45
    10e2:	90 95       	com	r25
    10e4:	81 95       	neg	r24
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__utoa_common>

000010ec <__mulhi_const_10>:
    10ec:	7a e0       	ldi	r23, 0x0A	; 10
    10ee:	97 9f       	mul	r25, r23
    10f0:	90 2d       	mov	r25, r0
    10f2:	87 9f       	mul	r24, r23
    10f4:	80 2d       	mov	r24, r0
    10f6:	91 0d       	add	r25, r1
    10f8:	11 24       	eor	r1, r1
    10fa:	08 95       	ret

000010fc <__utoa_ncheck>:
    10fc:	bb 27       	eor	r27, r27

000010fe <__utoa_common>:
    10fe:	fb 01       	movw	r30, r22
    1100:	55 27       	eor	r21, r21
    1102:	aa 27       	eor	r26, r26
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	aa 1f       	adc	r26, r26
    110a:	a4 17       	cp	r26, r20
    110c:	10 f0       	brcs	.+4      	; 0x1112 <__utoa_common+0x14>
    110e:	a4 1b       	sub	r26, r20
    1110:	83 95       	inc	r24
    1112:	50 51       	subi	r21, 0x10	; 16
    1114:	b9 f7       	brne	.-18     	; 0x1104 <__utoa_common+0x6>
    1116:	a0 5d       	subi	r26, 0xD0	; 208
    1118:	aa 33       	cpi	r26, 0x3A	; 58
    111a:	08 f0       	brcs	.+2      	; 0x111e <__utoa_common+0x20>
    111c:	a9 5d       	subi	r26, 0xD9	; 217
    111e:	a1 93       	st	Z+, r26
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	79 f7       	brne	.-34     	; 0x1102 <__utoa_common+0x4>
    1124:	b1 11       	cpse	r27, r1
    1126:	b1 93       	st	Z+, r27
    1128:	11 92       	st	Z+, r1
    112a:	cb 01       	movw	r24, r22
    112c:	0c 94 98 08 	jmp	0x1130	; 0x1130 <strrev>

00001130 <strrev>:
    1130:	dc 01       	movw	r26, r24
    1132:	fc 01       	movw	r30, r24
    1134:	67 2f       	mov	r22, r23
    1136:	71 91       	ld	r23, Z+
    1138:	77 23       	and	r23, r23
    113a:	e1 f7       	brne	.-8      	; 0x1134 <strrev+0x4>
    113c:	32 97       	sbiw	r30, 0x02	; 2
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <strrev+0x18>
    1140:	7c 91       	ld	r23, X
    1142:	6d 93       	st	X+, r22
    1144:	70 83       	st	Z, r23
    1146:	62 91       	ld	r22, -Z
    1148:	ae 17       	cp	r26, r30
    114a:	bf 07       	cpc	r27, r31
    114c:	c8 f3       	brcs	.-14     	; 0x1140 <strrev+0x10>
    114e:	08 95       	ret

00001150 <eeprom_read_word>:
    1150:	a8 e1       	ldi	r26, 0x18	; 24
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	42 e0       	ldi	r20, 0x02	; 2
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	0c 94 b6 08 	jmp	0x116c	; 0x116c <eeprom_read_blraw>

0000115c <eeprom_update_word>:
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	27 2f       	mov	r18, r23
    1160:	0e 94 c5 08 	call	0x118a	; 0x118a <eeprom_update_r18>
    1164:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <eeprom_update_byte>

00001168 <eeprom_read_block>:
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22

0000116c <eeprom_read_blraw>:
    116c:	fc 01       	movw	r30, r24
    116e:	f9 99       	sbic	0x1f, 1	; 31
    1170:	fe cf       	rjmp	.-4      	; 0x116e <eeprom_read_blraw+0x2>
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <eeprom_read_blraw+0x14>
    1174:	f2 bd       	out	0x22, r31	; 34
    1176:	e1 bd       	out	0x21, r30	; 33
    1178:	f8 9a       	sbi	0x1f, 0	; 31
    117a:	31 96       	adiw	r30, 0x01	; 1
    117c:	00 b4       	in	r0, 0x20	; 32
    117e:	0d 92       	st	X+, r0
    1180:	41 50       	subi	r20, 0x01	; 1
    1182:	50 40       	sbci	r21, 0x00	; 0
    1184:	b8 f7       	brcc	.-18     	; 0x1174 <eeprom_read_blraw+0x8>
    1186:	08 95       	ret

00001188 <eeprom_update_byte>:
    1188:	26 2f       	mov	r18, r22

0000118a <eeprom_update_r18>:
    118a:	f9 99       	sbic	0x1f, 1	; 31
    118c:	fe cf       	rjmp	.-4      	; 0x118a <eeprom_update_r18>
    118e:	92 bd       	out	0x22, r25	; 34
    1190:	81 bd       	out	0x21, r24	; 33
    1192:	f8 9a       	sbi	0x1f, 0	; 31
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	00 b4       	in	r0, 0x20	; 32
    1198:	02 16       	cp	r0, r18
    119a:	39 f0       	breq	.+14     	; 0x11aa <eeprom_update_r18+0x20>
    119c:	1f ba       	out	0x1f, r1	; 31
    119e:	20 bd       	out	0x20, r18	; 32
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	fa 9a       	sbi	0x1f, 2	; 31
    11a6:	f9 9a       	sbi	0x1f, 1	; 31
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	08 95       	ret

000011ac <_exit>:
    11ac:	f8 94       	cli

000011ae <__stop_program>:
    11ae:	ff cf       	rjmp	.-2      	; 0x11ae <__stop_program>
